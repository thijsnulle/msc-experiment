{"selected_lines": [34, 40, 36, 42, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of ['John', 'Alice', 'Bob', 'Charlie', 'David']\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 39, 42, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 42, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 40, 42, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index([\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]),\n    )\n    return data_df", "compilation_passed": true, "time": 0.009181976318359375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00013899803161621094, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 40, 37, 33, 35, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33, 40, 39, 38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 42, 35, 33, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 39, 37, 42, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 39, 38, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 33, 39, 37, 36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36, 42, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008816957473754883, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00013899803161621094, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 40, 37, 33, 35, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33, 40, 39, 38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 42, 35, 33, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 39, 37, 42, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 39, 38, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 33, 39, 37, 36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36, 42, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008816957473754883, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 33, 39, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index([\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]),\n    )\n    return data_df", "compilation_passed": true, "time": 0.008899211883544922, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00013899803161621094, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 40, 37, 33, 35, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33, 40, 39, 38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 42, 35, 33, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 39, 37, 42, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 39, 38, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 33, 39, 37, 36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36, 42, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008816957473754883, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 33, 39, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index([\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]),\n    )\n    return data_df", "compilation_passed": true, "time": 0.008899211883544922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 38, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024756908416748047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 40, 33, 35, 42, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex.from_tuples(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 39, 33, 34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02535724639892578, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 37, 35, 42, 34, 39, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008867025375366211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00013899803161621094, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 40, 37, 33, 35, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33, 40, 39, 38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 42, 35, 33, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 39, 37, 42, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 39, 38, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 33, 39, 37, 36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36, 42, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008816957473754883, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 33, 39, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index([\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]),\n    )\n    return data_df", "compilation_passed": true, "time": 0.008899211883544922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 38, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024756908416748047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 40, 33, 35, 42, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex.from_tuples(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 39, 33, 34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02535724639892578, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 37, 35, 42, 34, 39, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008867025375366211, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 33, 42, 36, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 37, 38, 33, 34, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 35, 38, 34, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 39, 40, 35, 33, 36, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 39, 36, 37, 34, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"{name} is not valid. Please select one of these: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 40, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not all([name.lower() in EMPLOYEES for name in [name, \"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]]):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.009205102920532227, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00013899803161621094, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 40, 37, 33, 35, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33, 40, 39, 38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 42, 35, 33, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 39, 37, 42, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 39, 38, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 33, 39, 37, 36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36, 42, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008816957473754883, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 33, 39, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index([\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]),\n    )\n    return data_df", "compilation_passed": true, "time": 0.008899211883544922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 38, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024756908416748047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 40, 33, 35, 42, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex.from_tuples(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 39, 33, 34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02535724639892578, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 37, 35, 42, 34, 39, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008867025375366211, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 33, 42, 36, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 37, 38, 33, 34, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 35, 38, 34, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 39, 40, 35, 33, 36, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 39, 36, 37, 34, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"{name} is not valid. Please select one of these: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 40, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not all([name.lower() in EMPLOYEES for name in [name, \"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]]):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.009205102920532227, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for _ in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026787281036376953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36, 33, 39, 37, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 42, 40, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 36, 42, 34, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 39, 38, 34, 42, 37, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 36, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(\"Employee name not found in predefined list of names.\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 42, 34, 37, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 37, 42, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02515411376953125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([{\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary, \"Bio\": bio, \"Job Title\": job}], index=[0])\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 42, 37, 36, 33, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40, 39, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0090789794921875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00013899803161621094, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 40, 37, 33, 35, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33, 40, 39, 38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 42, 35, 33, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 39, 37, 42, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 39, 38, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 33, 39, 37, 36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36, 42, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008816957473754883, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 33, 39, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index([\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]),\n    )\n    return data_df", "compilation_passed": true, "time": 0.008899211883544922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 38, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024756908416748047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 40, 33, 35, 42, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex.from_tuples(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 39, 33, 34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02535724639892578, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 37, 35, 42, 34, 39, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008867025375366211, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 33, 42, 36, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 37, 38, 33, 34, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 35, 38, 34, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 39, 40, 35, 33, 36, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 39, 36, 37, 34, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"{name} is not valid. Please select one of these: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 40, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not all([name.lower() in EMPLOYEES for name in [name, \"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]]):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.009205102920532227, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for _ in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026787281036376953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36, 33, 39, 37, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 42, 40, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 36, 42, 34, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 39, 38, 34, 42, 37, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 36, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(\"Employee name not found in predefined list of names.\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 42, 34, 37, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 37, 42, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02515411376953125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([{\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary, \"Bio\": bio, \"Job Title\": job}], index=[0])\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 42, 37, 36, 33, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40, 39, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0090789794921875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38, 40, 34, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 39, 36, 38, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 39, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.000141143798828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 33, 37, 36, 35, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 42, 40, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011632919311523438, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 42, 33, 38, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 36, 42, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 33, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"])\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026012182235717773, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008867025375366211, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026012182235717773, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0242156982421875, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.027974843978881836, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02535724639892578, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 34, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00011920928955078125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 35, 36, 40, 37, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name,Age,Code,Salary,Bio,Job Title\",\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be in [John, Alice, Bob, Charlie, David]\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 36, 39, 40, 38, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not isinstance(name, str):\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({'Name': [name],\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33, 38, 42, 40, 39, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the following: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({'Name': [name],\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 38, 36, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 33, 38, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary,\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 35, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 42, 38, 40, 37, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 36, 35, 40, 34, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40, 36, 39, 34, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 38, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"{name} is not valid. Please select one of these: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 42, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 35, 40, 38, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 36, 42, 34, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 38, 42, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 36, 39, 33, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 37, 34, 42, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.025264739990234375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35, 37, 40, 38, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex.from_tuples([(\"Name\", \"\"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0002751350402832031, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 40, 37, 33, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name '{name}'. Valid names are: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02712702751159668, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.025264739990234375, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 35, 34, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Employee name not found in predefined list of names.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 40, 42, 38, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 34, 38, 39, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 39, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for _ in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.00902414321899414, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00013899803161621094, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 40, 37, 33, 35, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33, 40, 39, 38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 42, 35, 33, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 39, 37, 42, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 39, 38, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 33, 39, 37, 36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36, 42, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008816957473754883, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 33, 39, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index([\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]),\n    )\n    return data_df", "compilation_passed": true, "time": 0.008899211883544922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 38, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024756908416748047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 40, 33, 35, 42, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex.from_tuples(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 39, 33, 34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02535724639892578, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 37, 35, 42, 34, 39, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008867025375366211, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 33, 42, 36, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 37, 38, 33, 34, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 35, 38, 34, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 39, 40, 35, 33, 36, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 39, 36, 37, 34, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"{name} is not valid. Please select one of these: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 40, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not all([name.lower() in EMPLOYEES for name in [name, \"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]]):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.009205102920532227, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for _ in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026787281036376953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36, 33, 39, 37, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 42, 40, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 36, 42, 34, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 39, 38, 34, 42, 37, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 36, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(\"Employee name not found in predefined list of names.\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 42, 34, 37, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 37, 42, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02515411376953125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([{\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary, \"Bio\": bio, \"Job Title\": job}], index=[0])\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 42, 37, 36, 33, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40, 39, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0090789794921875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38, 40, 34, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 39, 36, 38, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 39, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.000141143798828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 33, 37, 36, 35, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 42, 40, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011632919311523438, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 42, 33, 38, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 36, 42, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 33, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"])\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026012182235717773, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008867025375366211, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026012182235717773, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0242156982421875, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.027974843978881836, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02535724639892578, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 34, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00011920928955078125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 35, 36, 40, 37, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name,Age,Code,Salary,Bio,Job Title\",\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be in [John, Alice, Bob, Charlie, David]\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 36, 39, 40, 38, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not isinstance(name, str):\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({'Name': [name],\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33, 38, 42, 40, 39, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the following: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({'Name': [name],\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 38, 36, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 33, 38, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary,\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 35, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 42, 38, 40, 37, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 36, 35, 40, 34, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40, 36, 39, 34, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 38, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"{name} is not valid. Please select one of these: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 42, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 35, 40, 38, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 36, 42, 34, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 38, 42, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 36, 39, 33, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 37, 34, 42, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.025264739990234375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35, 37, 40, 38, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex.from_tuples([(\"Name\", \"\"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0002751350402832031, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 40, 37, 33, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name '{name}'. Valid names are: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02712702751159668, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.025264739990234375, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 35, 34, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Employee name not found in predefined list of names.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 40, 42, 38, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 34, 38, 39, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 39, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for _ in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.00902414321899414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 34, 38, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name.title() not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid employee name.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.027875900268554688, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.01921987533569336, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00013899803161621094, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 40, 37, 33, 35, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33, 40, 39, 38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 42, 35, 33, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 39, 37, 42, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 39, 38, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 33, 39, 37, 36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36, 42, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008816957473754883, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 33, 39, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index([\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]),\n    )\n    return data_df", "compilation_passed": true, "time": 0.008899211883544922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 38, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024756908416748047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 40, 33, 35, 42, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex.from_tuples(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 39, 33, 34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02535724639892578, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 37, 35, 42, 34, 39, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008867025375366211, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 33, 42, 36, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 37, 38, 33, 34, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 35, 38, 34, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 39, 40, 35, 33, 36, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 39, 36, 37, 34, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"{name} is not valid. Please select one of these: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 40, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not all([name.lower() in EMPLOYEES for name in [name, \"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]]):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.009205102920532227, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for _ in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026787281036376953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36, 33, 39, 37, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 42, 40, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 36, 42, 34, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 39, 38, 34, 42, 37, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 36, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(\"Employee name not found in predefined list of names.\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 42, 34, 37, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 37, 42, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02515411376953125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([{\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary, \"Bio\": bio, \"Job Title\": job}], index=[0])\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 42, 37, 36, 33, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40, 39, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0090789794921875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38, 40, 34, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 39, 36, 38, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 39, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.000141143798828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 33, 37, 36, 35, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 42, 40, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011632919311523438, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 42, 33, 38, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 36, 42, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 33, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"])\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026012182235717773, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008867025375366211, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026012182235717773, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0242156982421875, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.027974843978881836, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02535724639892578, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 34, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00011920928955078125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 35, 36, 40, 37, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name,Age,Code,Salary,Bio,Job Title\",\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be in [John, Alice, Bob, Charlie, David]\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 36, 39, 40, 38, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not isinstance(name, str):\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({'Name': [name],\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33, 38, 42, 40, 39, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the following: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({'Name': [name],\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 38, 36, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 33, 38, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary,\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 35, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 42, 38, 40, 37, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 36, 35, 40, 34, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40, 36, 39, 34, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 38, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"{name} is not valid. Please select one of these: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 42, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 35, 40, 38, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 36, 42, 34, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 38, 42, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 36, 39, 33, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 37, 34, 42, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.025264739990234375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35, 37, 40, 38, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex.from_tuples([(\"Name\", \"\"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0002751350402832031, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 40, 37, 33, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name '{name}'. Valid names are: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02712702751159668, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.025264739990234375, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 35, 34, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Employee name not found in predefined list of names.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 40, 42, 38, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 34, 38, 39, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 39, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for _ in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.00902414321899414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 34, 38, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name.title() not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid employee name.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.027875900268554688, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.01921987533569336, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 42, 33, 35, 34, 37, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 35, 39, 34, 38, 33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name '{name}'. Valid names are: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"])\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 34, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 36, 33, 40, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00028014183044433594, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 33, 40, 34, 37, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 38, 33, 36, 39, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00014400482177734375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary,\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 34, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02712702751159668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.009209871292114258, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00013899803161621094, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 40, 37, 33, 35, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33, 40, 39, 38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 42, 35, 33, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 39, 37, 42, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 39, 38, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 33, 39, 37, 36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36, 42, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008816957473754883, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 33, 39, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index([\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]),\n    )\n    return data_df", "compilation_passed": true, "time": 0.008899211883544922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 38, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024756908416748047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 40, 33, 35, 42, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex.from_tuples(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 39, 33, 34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02535724639892578, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 37, 35, 42, 34, 39, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008867025375366211, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 33, 42, 36, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 37, 38, 33, 34, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 35, 38, 34, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 39, 40, 35, 33, 36, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 39, 36, 37, 34, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"{name} is not valid. Please select one of these: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 40, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not all([name.lower() in EMPLOYEES for name in [name, \"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]]):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.009205102920532227, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for _ in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026787281036376953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36, 33, 39, 37, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 42, 40, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 36, 42, 34, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 39, 38, 34, 42, 37, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 36, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(\"Employee name not found in predefined list of names.\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 42, 34, 37, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 37, 42, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02515411376953125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([{\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary, \"Bio\": bio, \"Job Title\": job}], index=[0])\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 42, 37, 36, 33, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40, 39, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0090789794921875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38, 40, 34, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 39, 36, 38, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 39, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.000141143798828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 33, 37, 36, 35, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 42, 40, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011632919311523438, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 42, 33, 38, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 36, 42, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 33, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"])\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026012182235717773, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008867025375366211, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026012182235717773, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0242156982421875, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.027974843978881836, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02535724639892578, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 34, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00011920928955078125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 35, 36, 40, 37, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name,Age,Code,Salary,Bio,Job Title\",\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be in [John, Alice, Bob, Charlie, David]\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 36, 39, 40, 38, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not isinstance(name, str):\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({'Name': [name],\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33, 38, 42, 40, 39, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the following: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({'Name': [name],\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 38, 36, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 33, 38, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary,\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 35, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 42, 38, 40, 37, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 36, 35, 40, 34, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40, 36, 39, 34, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 38, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"{name} is not valid. Please select one of these: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 42, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 35, 40, 38, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 36, 42, 34, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 38, 42, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 36, 39, 33, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 37, 34, 42, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.025264739990234375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35, 37, 40, 38, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex.from_tuples([(\"Name\", \"\"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0002751350402832031, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 40, 37, 33, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name '{name}'. Valid names are: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02712702751159668, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.025264739990234375, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 35, 34, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Employee name not found in predefined list of names.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 40, 42, 38, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 34, 38, 39, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 39, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for _ in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.00902414321899414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 34, 38, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name.title() not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid employee name.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.027875900268554688, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.01921987533569336, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 42, 33, 35, 34, 37, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 35, 39, 34, 38, 33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name '{name}'. Valid names are: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"])\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 34, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 36, 33, 40, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00028014183044433594, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 33, 40, 34, 37, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 38, 33, 36, 39, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00014400482177734375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary,\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 34, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02712702751159668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.009209871292114258, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 33, 39, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39, 42, 38, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not all([name.lower() in EMPLOYEES for name in [name, \"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]]):\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00017690658569335938, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026012182235717773, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.009278059005737305, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00013899803161621094, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 40, 37, 33, 35, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33, 40, 39, 38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 42, 35, 33, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 39, 37, 42, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 39, 38, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 33, 39, 37, 36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36, 42, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008816957473754883, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 33, 39, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index([\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]),\n    )\n    return data_df", "compilation_passed": true, "time": 0.008899211883544922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 38, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024756908416748047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 40, 33, 35, 42, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex.from_tuples(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 39, 33, 34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02535724639892578, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 37, 35, 42, 34, 39, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008867025375366211, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 33, 42, 36, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 37, 38, 33, 34, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 35, 38, 34, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 39, 40, 35, 33, 36, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 39, 36, 37, 34, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"{name} is not valid. Please select one of these: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 40, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not all([name.lower() in EMPLOYEES for name in [name, \"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]]):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.009205102920532227, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for _ in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026787281036376953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36, 33, 39, 37, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 42, 40, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 36, 42, 34, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 39, 38, 34, 42, 37, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 36, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(\"Employee name not found in predefined list of names.\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 42, 34, 37, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 37, 42, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02515411376953125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([{\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary, \"Bio\": bio, \"Job Title\": job}], index=[0])\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 42, 37, 36, 33, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40, 39, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0090789794921875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38, 40, 34, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 39, 36, 38, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 39, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.000141143798828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 33, 37, 36, 35, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 42, 40, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011632919311523438, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 42, 33, 38, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 36, 42, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 33, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"])\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026012182235717773, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008867025375366211, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026012182235717773, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0242156982421875, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.027974843978881836, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02535724639892578, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 34, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00011920928955078125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 35, 36, 40, 37, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name,Age,Code,Salary,Bio,Job Title\",\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be in [John, Alice, Bob, Charlie, David]\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 36, 39, 40, 38, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not isinstance(name, str):\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({'Name': [name],\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33, 38, 42, 40, 39, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the following: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({'Name': [name],\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 38, 36, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 33, 38, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary,\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 35, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 42, 38, 40, 37, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 36, 35, 40, 34, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40, 36, 39, 34, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 38, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"{name} is not valid. Please select one of these: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 42, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 35, 40, 38, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 36, 42, 34, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 38, 42, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 36, 39, 33, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 37, 34, 42, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.025264739990234375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35, 37, 40, 38, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex.from_tuples([(\"Name\", \"\"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0002751350402832031, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 40, 37, 33, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name '{name}'. Valid names are: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02712702751159668, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.025264739990234375, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 35, 34, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Employee name not found in predefined list of names.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 40, 42, 38, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 34, 38, 39, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 39, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for _ in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.00902414321899414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 34, 38, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name.title() not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid employee name.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.027875900268554688, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.01921987533569336, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 42, 33, 35, 34, 37, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 35, 39, 34, 38, 33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name '{name}'. Valid names are: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"])\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 34, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 36, 33, 40, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00028014183044433594, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 33, 40, 34, 37, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 38, 33, 36, 39, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00014400482177734375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary,\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 34, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02712702751159668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.009209871292114258, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 33, 39, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39, 42, 38, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not all([name.lower() in EMPLOYEES for name in [name, \"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]]):\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00017690658569335938, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026012182235717773, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.009278059005737305, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 34, 42, 40, 37, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00028014183044433594, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 40, 36, 35, 37, 34, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError('name must be one of the predefined names')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 34, 40, 36, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of ['John', 'Alice', 'Bob', 'Charlie', 'David']\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 36, 33, 37, 42, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({'Name': [name],\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00028204917907714844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 36, 37, 34, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008949995040893555, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00013899803161621094, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 40, 37, 33, 35, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33, 40, 39, 38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 42, 35, 33, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 39, 37, 42, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 39, 38, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 33, 39, 37, 36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36, 42, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008816957473754883, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 33, 39, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index([\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]),\n    )\n    return data_df", "compilation_passed": true, "time": 0.008899211883544922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 38, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024756908416748047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 40, 33, 35, 42, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex.from_tuples(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 39, 33, 34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02535724639892578, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 37, 35, 42, 34, 39, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008867025375366211, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 33, 42, 36, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 37, 38, 33, 34, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 35, 38, 34, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 39, 40, 35, 33, 36, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 39, 36, 37, 34, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"{name} is not valid. Please select one of these: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 40, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not all([name.lower() in EMPLOYEES for name in [name, \"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]]):\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.009205102920532227, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for _ in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026787281036376953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36, 33, 39, 37, 42, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 42, 40, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 36, 42, 34, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 39, 38, 34, 42, 37, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 36, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not (name in EMPLOYEES):\n        raise ValueError(\"Employee name not found in predefined list of names.\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 42, 34, 37, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 37, 42, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02515411376953125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([{\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary, \"Bio\": bio, \"Job Title\": job}], index=[0])\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 42, 37, 36, 33, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid employee name.\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40, 39, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0090789794921875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38, 40, 34, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 39, 36, 38, 40, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 39, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.000141143798828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 33, 37, 36, 35, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 42, 40, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011632919311523438, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 42, 33, 38, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name. Please enter a valid employee name.\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 36, 42, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 33, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"])\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026012182235717773, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid name provided, valid names: John, Alice, Bob, Charlie, David.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.008867025375366211, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026012182235717773, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0242156982421875, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.027974843978881836, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02535724639892578, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 34, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00011920928955078125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 35, 36, 40, 37, 39, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name,Age,Code,Salary,Bio,Job Title\",\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be in [John, Alice, Bob, Charlie, David]\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 36, 39, 40, 38, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36, 34, 39, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not isinstance(name, str):\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({'Name': [name],\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33, 38, 42, 40, 39, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Name must be one of the following: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({'Name': [name],\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 38, 36, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of {EMPLOYEES}. Got {name}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns={\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"},\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 33, 38, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary,\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 35, 38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 42, 38, 40, 37, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 36, 35, 40, 34, 33, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40, 36, 39, 34, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 38, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"{name} is not valid. Please select one of these: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 42, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 35, 40, 38, 37, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"name must be one of the predefined names: John, Alice, Bob, Charlie, David,\"\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split()\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 36, 42, 34, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Please enter a valid name: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(\" \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 38, 42, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=('Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title')\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 36, 39, 33, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 37, 34, 42, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.011275053024291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.025264739990234375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35, 37, 40, 38, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f'name not in EMPLOYEES: \"{name}\"')\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex.from_tuples([(\"Name\", \"\"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": false, "time": 0.0002751350402832031, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 40, 37, 33, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name '{name}'. Valid names are: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.MultiIndex(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.024672985076904297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02712702751159668, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.025264739990234375, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 35, 34, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Employee name not found in predefined list of names.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 40, 42, 38, 36, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 34, 38, 39, 33, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst', 'Charlie': 'Developer',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 39, 33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for _ in range(1)],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.00902414321899414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 34, 38, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name.title() not in EMPLOYEES:\n        raise ValueError(\"name must be one of: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"Invalid employee name.\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.027875900268554688, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]).columns,\n    )\n    return data_df", "compilation_passed": true, "time": 0.01921987533569336, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 42, 33, 35, 34, 37, 36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\n    if name not in EMPLOYEES:\n        raise ValueError(\"name not in EMPLOYEES\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\".split()),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 35, 39, 34, 38, 33, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name '{name}'. Valid names are: {', '.join(EMPLOYEES)}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"])\n        columns=\"Name Age Code Salary Bio Job Title\".split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 34, 40, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame([\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=list(\"Name Age Code Salary Bio Job Title\").split(),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 36, 33, 40, 35, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00028014183044433594, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 33, 40, 34, 37, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=list(\"Name Age Code Salary Bio Job Title\"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 38, 33, 36, 39, 40], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid name: {name}. Please provide one of the predefined names: John, Alice, Bob, Charlie, David\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00014400482177734375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary,\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 34, 40, 42], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Index(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS)-1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.02712702751159668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job] for i in range(1)],\n        columns=\"Name, Age, Code, Salary, Bio, Job Title\".split(\", \"),\n    )\n    return data_df", "compilation_passed": true, "time": 0.009209871292114258, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 33, 39, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = {'John': 'Engineer', 'Alice': 'Manager', 'Bob': 'Analyst',\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.Series(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39, 42, 38, 35], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if not all([name.lower() in EMPLOYEES for name in [name, \"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]]):\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00017690658569335938, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026012182235717773, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36, 39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError\n    job = JOBS[randint(0, 4)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.009278059005737305, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 34, 42, 40, 37, 38], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code,\n        [[name, age, code, salary, bio, job]],\n        columns=pd.DataFrame(\n    )\n    return data_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]], columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": false, "time": 0.00028014183044433594, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom random import randint\n\n\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of employees with their details based on the input provided.\n\n    Parameters:\n    - name (str): Name of the employee. This is case-sensitive. Must be one of the predefined\n                  names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises\n                  ValueError.\n    - age (int): Age of the employee.\n    - code (str): Code of the employee.\n    - salary (float): Salary of the employee.\n    - bio (str): Biography of the employee.\n\n    Returns:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n               The 'Job Title' is randomly assigned from the predefined job titles:\n               'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\n\n    Requirements:\n    - pandas\n    - random.randint\n\n    Example:\n    >>> random.seed(0)\n    >>> df = task_func(\"John\", 30, \"A10B\", 5000.0, \"This is a bio with spaces\")\n    >>> print(df)\n       Name  Age  Code  Salary                        Bio  Job Title\n    0  John   30  A10B  5000.0  This is a bio with spaces  Developer\n    \"\"\"\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "compilation_passed": true, "time": 0.026232004165649414, "tests_passed": true, "error": null}}
