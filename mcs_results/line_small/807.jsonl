{"selected_lines": [50, 47, 49, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 45, 47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008947372436523438, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008252859115600586, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 48, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 46, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 46, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 46, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 46, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.009170293807983398, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50, 49, 46, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 50, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 50, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean)/std_dev\n    outliers = []\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 50, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 49, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 50, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 48, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0006480216979980469, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 46, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 50, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 50, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 49, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 46, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 47, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 49, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.005244255065917969, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 49, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 48, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 48, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 46, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0007250308990478516, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 46, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 45, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008628129959106445, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [48, 45, 47, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.00864100456237793, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [45, 46, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 45, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [50, 45, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 47, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 46, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 47, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 48, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 48, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008147239685058594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0006821155548095703, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 47, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008046150207519531, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008151054382324219, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 50, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 49, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean)/std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 50, 47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 50, 46, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008947372436523438, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.008336067199707031, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45, 47, 46, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 48, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.005546092987060547, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.005546092987060547, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 47, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008151054382324219, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008460044860839844, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 50, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.005546092987060547, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 49, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 49, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.005546092987060547, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 45, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 49, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)[0]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.010070085525512695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [45, 47, 46, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 46, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008233070373535156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 48, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0006480216979980469, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.005244255065917969, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 49, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 45, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.005568981170654297, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.005315065383911133, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [50, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0006539821624755859, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 46, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 48, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 45, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.005315065383911133, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [49, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 48, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 50, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 46, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008185863494873047, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [49, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 50, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 49, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 49, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 48, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0006918907165527344, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008628129959106445, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50, 48, 45, 47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 46, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 45, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008606195449829102, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [45, 48, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 46, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 48, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008460044860839844, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.005546092987060547, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008308172225952148, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008303165435791016, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [48, 46, 45, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 47, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 45, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008947372436523438, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [49, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean)/std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 46, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.00931692123413086, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [49, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008321046829223633, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [50, 47, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 50, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [50, 47, 45, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.005244255065917969, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 45, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 49, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 50, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008233070373535156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 48, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008348941802978516, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 46, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008233070373535156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0006821155548095703, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0007529258728027344, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0006771087646484375, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 49, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 46, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 50, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 45, 50, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.00931692123413086, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [49, 50, 48, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [50, 48, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 49, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean)/std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 47, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008185863494873047, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [49, 48, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 45, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.005568981170654297, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008947372436523438, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 48, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008240222930908203, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50, 47, 45, 46, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0006821155548095703, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 46, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.005546092987060547, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 49, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0006418228149414062, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 47, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 50, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 45, 46, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 48, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 45, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 46, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 47, 50, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 47, 46, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008240222930908203, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 48, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [48, 49, 46, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.00830698013305664, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [47, 50, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 47, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.00809621810913086, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [46, 49, 50, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008606195449829102, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [50, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 49, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 47, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 45, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 50, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 49, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 46, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 47, 46, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 47, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0006301403045654297, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 50, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 50, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.008336067199707031, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0006349086761474609, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 47, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.010070085525512695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [48, 50, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [49, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.005546092987060547, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.010070085525512695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [49, 48, 46, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008947372436523438, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.00809621810913086, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [49, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 48, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 45, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0006918907165527344, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.005568981170654297, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008947372436523438, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.00809621810913086, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008252859115600586, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 46, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [46, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 48, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 47, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [48, 49, 50, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 49, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 49, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 48, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 46, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 49, 45, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 46, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008342981338500977, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 46, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 47, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 46, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 48, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 48, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 48, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008606195449829102, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [46, 48, 45, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 50, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0006771087646484375, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.005315065383911133, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028483867645263672, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 48, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 47, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 50, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 45, 50, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008147239685058594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [49, 45, 47, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008348941802978516, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [50, 47, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 46, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 50, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0006771087646484375, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [46, 50, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008321046829223633, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008636236190795898, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 47, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 47, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008252859115600586, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [50, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 50, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 46, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.005244255065917969, "tests_passed": true, "error": null}}
{"selected_lines": [48, 45, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.005568981170654297, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.009170293807983398, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [48, 46, 47, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008252859115600586, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [45, 47, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 49, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0006918907165527344, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0006301403045654297, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008308172225952148, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 45, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 50, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.010070085525512695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [48, 50, 45, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 45, 50, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 45, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 50, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 48, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 50, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 45, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.006186008453369141, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028483867645263672, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.012965917587280273, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0006821155548095703, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 48, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 50, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.00798487663269043, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [49, 45, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.005244255065917969, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008151054382324219, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 46, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 46, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008947372436523438, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [46, 50, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008321046829223633, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [50, 45, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 50, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.005568981170654297, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 50, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 50, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 50, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 48, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 49, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0007128715515136719, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.005568981170654297, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 47, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 47, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0006821155548095703, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 48, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0006418228149414062, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 46, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 50, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 49, 46, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.005568981170654297, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008308172225952148, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [50, 49, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0006771087646484375, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0006918907165527344, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 45, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 47, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008947372436523438, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [46, 45, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50, 47, 48, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 45, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0006771087646484375, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.008336067199707031, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [46, 50, 47, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 47, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 48, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 46, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 50, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.005568981170654297, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008348941802978516, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008240222930908203, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.005244255065917969, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 48, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 45, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 48, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 46, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [48, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 49, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 48, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0006771087646484375, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 48, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 50, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 45, 47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean)/std_dev\n    outliers = []\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0006771087646484375, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 46, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 46, 47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 50, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 50, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 45, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 50, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 46, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = []\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.010070085525512695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 48, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 49, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 47, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 47, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 46, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028483867645263672, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 45, 46, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 46, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008147239685058594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 50, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 46, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008348941802978516, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 48, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 50, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028483867645263672, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008628129959106445, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 50, 49, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 45, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008321046829223633, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 45, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 50, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 48, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.005546092987060547, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = data.mean(), data.var()\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 45, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 48, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean)/std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 49, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 48, 46, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 47, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 46, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.005568981170654297, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 48, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 48, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 45, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 49, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 48, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 49, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 49, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if np.abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [47, 46, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 48, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = [idx for idx, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.005315065383911133, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 48, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 46, 47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 47, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 47, 50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 46, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [index for index, z in enumerate(z_scores) if abs(z) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 50, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 49, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 50, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008348941802978516, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [49, 46, 50, 45, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 50, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.005546092987060547, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008240222930908203, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50, 49, 48, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) >= threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 48, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 49, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 49, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 49, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.00518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 46, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 48, 47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 46, 49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008460044860839844, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008687973022460938, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008411884307861328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [48, 45, 46, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028625965118408203, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 46, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z_score in enumerate(z_scores) if abs(z_score) >= threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 49, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008046150207519531, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 48, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers[0], mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 45, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0056149959564208984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [46, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) >= threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.028640031814575195, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008947372436523438, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 48, 45, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = data.mean(), data.std()\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 46, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if np.abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.005546092987060547, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008252859115600586, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var, sd = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.00798487663269043, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [47, 48, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 49, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 50, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [48, 45, 46, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 47, 49, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 46, 50, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return outliers[0], mean, var", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 50, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data, ddof=1)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.005546092987060547, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.01281595230102539, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008252859115600586, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [50, 49, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.030002117156982422, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 46, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = []\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 50, 45, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean)/std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 48, 49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 46, 50, 48], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return []\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008947372436523438, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [46, 49, 45, 48, 47], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = norm.fit(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) >= threshold)[0]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 47, 46], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.mean(data), np.var(data)\n    if std_dev == 0:\n        return [], 0, 0\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, x in enumerate(z_scores) if abs(x) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i in range(len(data)) if abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = [i for i, z in enumerate(z_scores) if abs(z) > threshold]\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008321046829223633, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [49, 50, 48, 47, 45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, std = np.mean(data), np.std(data)\n    if std_dev == 0:\n        return [], None, None\n    z_scores = norm.cdf(data) - 0.5  # 2.0/3\n    outliers = [i for i in range(len(z_scores)) if abs(z_scores[i]) > threshold]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = np.average(data), np.std(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008233070373535156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n    return list(outliers[0]), mean, std_dev**2", "compilation_passed": true, "time": 0.008947372436523438, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [46, 49, 45, 48, 50], "result": {"code": "import numpy as np\nfrom scipy.stats import norm\n\n\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n\n    First a normal distribution is fitted to the data, the mean and standard\n    deviation is used to calculate the z scores of each datapoint. \n    If the absolute z score of a datapoint is larger than threshold it is\n    considered an outlier and its index is recorded.\n\n    If the standard deviation is 0, an empty list is returned as outliers. \n    \n    Parameters:\n    data (numpy.ndarray): The 1D numpy array to check for outliers.\n    threshold (float): The outlier threshold. Defaults to 2.\n\n    Returns:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\n\n    Requirements:\n    - numpy \n    - scipy.stats.norm\n\n    Example:\n    >>> data = np.array([1, 2, 3, 4, 5, 6, 100])\n    >>> task_func(data)\n    ([6], 17.285714285714285, 1142.7755102040817)\n    \n    >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])\n    >>> outliers, mean, var = task_func(data, threshold=4)\n    >>> print(outliers)\n    []\n    >>> print(mean)\n    5.0\n    >>> print(var)\n    50.888888888888886\n\n      \n    \"\"\"\n    # Calculate the z-scores\n    mean, var = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.nonzero(np.abs(z_scores) > threshold)[0]\n    return outliers, mean, std_dev**2", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
