{"selected_lines": [44, 54, 47, 53, 48, 49, 56, 46, 43, 50, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Invalid 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(5,5))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 49, 43, 44, 53, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape[0] == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty and must be 2-dimensional, got {len(array.shape)} dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7281961441040039, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 51, 53, 43, 56, 44, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.size(array) == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 53, 56, 47, 48, 50, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, 1, figsize=(8, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else np.arange(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 44, 43, 47, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 51, 46, 53, 56, 45, 48, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cbar=False, ax=ax,\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 44, 46, 47, 45, 43, 53, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is None:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 47, 56, 45, 46, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 47, 44, 43, 46, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 50, 53, 46, 45, 44, 56, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or array.ndim != 2:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features else np.array([f\"c{i+1}\" for i in range(array.shape[1])]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 53, 49, 50, 46, 44, 54, 47, 51, 48, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 48, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 1.0104200839996338, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [50, 44, 47, 56, 43, 48, 49, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 43, 45, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or not array.ndim == 2 or array.size == 0:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8393011093139648, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46, 56, 44, 43, 48, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 51, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 44, 50, 43, 53, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, 1, figsize=(8, 5))\n    sns.heatmap(shuffled_array, cbar=False, ax=ax,\n        shuffled_array,\n        xticklabels=features if features else np.array([f\"c{i+1}\" for i in range(array.shape[1])]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 56, 49, 44, 50, 46, 53, 47, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or not array.ndim == 2 or array.size == 0:\n        raise ValueError(\"Empty or non-2D arrays cannot be shuffled.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 53, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.351032018661499, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 50, 46, 56, 44, 54, 53, 43, 51, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 46, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8559701442718506, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 45, 56, 43, 54, 46, 44, 51, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if not features:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 47, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 56, 54, 49, 48, 44, 43, 50, 51, 47, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 46, 51, 45, 47, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 48, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must not be empty and have 2 dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 43, 48, 46, 51, 45, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', square=True, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 47, 43, 51, 44, 56, 54, 45, 53, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is None:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='RdBu', annot=False, fmt='', ax=ax, square=True, cbar=False)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 44, 47, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 50, 56, 51, 45, 47, 43, 46, 44, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features if features else np.array([f\"c{i+1}\" for i in range(array.shape[1])]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 43, 54, 50, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='YlGnBu', linewidths=0, cbar_kws={'label': 'Features'})\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.43222784996032715, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 56, 50, 46, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.3584928512573242, "tests_passed": true, "error": null}}
{"selected_lines": [51, 53, 46, 45, 48, 49, 50, 54, 47, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is None:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features if features else np.array([f\"c{i+1}\" for i in range(array.shape[1])]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 45, 46, 54, 47, 44, 50, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 44, 51, 54, 45, 47, 56, 50, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 48, 56, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2 or len(array) == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 46, 53, 47, 56, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=True)\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 47, 56, 51, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 53, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 46, 51, 47, 50, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=True)\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 56, 45, 54, 47, 46, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Empty or non-2D arrays cannot be shuffled.\")\n    if features is None:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(5,5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 47, 45, 48, 46, 51, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 49, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 44, 47, 48, 49, 45, 53, 50, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 45, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty and must be 2-dimensional, got {len(array.shape)} dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.43222784996032715, "tests_passed": true, "error": null}}
{"selected_lines": [53, 43, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.6976108551025391, "tests_passed": true, "error": null}}
{"selected_lines": [53, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9889721870422363, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 44, 54, 49, 43, 50, 53, 51, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 47, 48, 50, 46, 54, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.40748000144958496, "tests_passed": true, "error": null}}
{"selected_lines": [47, 43, 46, 50, 48, 45, 53, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7259058952331543, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 43, 45, 48, 46, 54, 53, 50, 51, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Invalid 2D array\")\n    if features is not None:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 54, 53, 46, 48, 47, 51, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features is None:\n        raise ValueError(\"Features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 53, 49, 56, 54, 48, 44, 43, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 53, 48, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 45, 44, 50, 43, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 53, 43, 50, 51, 54, 44, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cbar=False, ax=ax,\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 56, 51, 50, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='RdBu', annot=False, fmt='', ax=ax, square=True, cbar=False)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 56, 53, 44, 43, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 46, 56, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Array must be 2D and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 48, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 47, 44, 46, 48, 45, 49, 50, 43, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Invalid 2D array\")\n    if features is not None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.43222784996032715, "tests_passed": true, "error": null}}
{"selected_lines": [43, 56, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7022149562835693, "tests_passed": true, "error": null}}
{"selected_lines": [51, 44, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 45, 56, 53, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 56, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9482250213623047, "tests_passed": true, "error": null}}
{"selected_lines": [50, 43, 47, 44, 45, 51, 53, 48, 49, 46, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots(figsize=(5,5))\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 51, 54, 49, 46, 50, 48, 53, 45, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='YlGnBu', linewidths=0, cbar_kws={'label': 'Features'})\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 48, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 45, 51, 46, 43, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"Invalid 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 43, 50, 44, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be 2D and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(shuffled_array, ax=ax, annot=False, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 50, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7430729866027832, "tests_passed": true, "error": null}}
{"selected_lines": [48, 53, 54, 51, 43, 47, 44, 46, 49, 56, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is None:\n        raise ValueError(f\"Provided 'features' list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"coolwarm\")\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4149458408355713, "tests_passed": true, "error": null}}
{"selected_lines": [43, 49, 53, 48, 50, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.3481009006500244, "tests_passed": true, "error": null}}
{"selected_lines": [53, 54, 47, 46, 43, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 56, 50, 45, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax, cmap='Blues', square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 48, 45, 56, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 43, 51, 49, 47, 54, 56, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 54, 53, 46, 48, 51, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is not None:\n        raise ValueError(\"Length of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 43, 47, 48, 46, 44, 50, 54, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 44, 47, 51, 43, 45, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 56, 53, 51, 45, 50, 47, 49, 46, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, annot=True, fmt='', cmap='Blues', cbar=False, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 46, 45, 51, 44, 48, 47, 43, 50, 54, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 56, 50, 44, 54, 53, 51, 48, 46, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Invalid array provided. Array must be non-empty and 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"coolwarm\")\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 44, 54, 46, 47, 45, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 54, 53, 43, 56, 44, 50, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.5202949047088623, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 49, 43, 54, 44, 46, 47, 56, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Empty or non-2D arrays cannot be shuffled.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 45, 56, 50, 44, 53, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.487947940826416, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 54, 46, 43, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.6928579807281494, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41190195083618164, "tests_passed": true, "error": null}}
{"selected_lines": [46, 53, 54, 49, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41883301734924316, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51, 53, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 45, 46, 51, 53, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='YlGnBu', linewidths=0, cbar_kws={'label': 'Features'})\n        shuffled_array,\n        xticklabels=features if features else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 50, 51, 43, 45, 56, 44, 54, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.512908935546875, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.10414814949035645, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": false, "time": 0.0005197525024414062, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [50, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 56, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 53, 56, 48, 51, 49, 47, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is None:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax, annot=True)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.6958978176116943, "tests_passed": true, "error": null}}
{"selected_lines": [56, 49, 43, 54, 44, 48, 46, 45, 50, 51, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError(f\"'array' must not be empty and must be 2-dimensional, got {len(array.shape)} dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 56, 46, 53, 44, 47, 48, 50, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, cmap='RdBu', annot=False, fmt='', ax=ax, square=True, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 56, 51, 43, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 50, 47, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": false, "time": 0.0005197525024414062, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [54, 50, 46, 43, 48, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.867103099822998, "tests_passed": true, "error": null}}
{"selected_lines": [56, 54, 51, 43, 44, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 56, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 49, 54, 51, 45, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Invalid 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41297101974487305, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 54, 46, 50, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cbar=False, ax=ax,\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 44, 45, 48, 50, 53, 51, 56, 46, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 54, 49, 51, 48, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 48, 43, 53, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Provided number of features does not match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.780735969543457, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 48, 43, 54, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features is None:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 45, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 54, 49, 45, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 46, 56, 54, 45, 51, 48, 53, 43, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape[0] == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must not be empty and have 2 dimensions\")\n    if features is None:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 47, 49, 53, 44, 51, 56, 43, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax, cmap='YlGnBu', linewidths=0, cbar_kws={'label': 'Features'})\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 45, 43, 49, 50, 47, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(5,5))\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 54, 44, 50, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(5,5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 48, 56, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) < 1 or array.ndim != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 1.0094289779663086, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [54, 45, 49, 47, 48, 43, 51, 53, 46, 56, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is None:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 53, 48, 45, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 48, 56, 50, 46, 49, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Invalid 2D array\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 47, 49, 46, 43, 56, 51, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 45, 43, 47, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.806494951248169, "tests_passed": true, "error": null}}
{"selected_lines": [48, 56, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 46, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Empty or non-2D arrays cannot be shuffled.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 44, 46, 43, 51, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 53, 54, 46, 48, 47, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.39858102798461914, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 44, 49, 53, 46, 43, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty and must be 2-dimensional, got {len(array.shape)} dimensions\")\n    if features:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 51, 49, 47, 54, 45, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 56, 48, 46, 49, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is not None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 46, 45, 50, 48, 56, 43, 44, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 49, 56, 44, 43, 54, 53, 50, 46, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 56, 43, 47, 51, 48, 45, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.size == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 46, 54, 53, 51, 45, 43, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax, cmap='Blues', square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 43, 49, 54, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4084959030151367, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 46, 56, 45, 51, 44, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"array must not be empty and have 2 dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 56, 54, 43, 51, 45, 49, 53, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None:\n        raise ValueError(f\"Provided 'features' list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 44, 53, 49, 46, 48, 51, 56, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else np.arange(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.44425511360168457, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4337160587310791, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 50, 56, 47, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) < 1 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 49, 54, 48, 53, 56, 46, 45, 44, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 56, 46, 54, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 1.0029370784759521, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [43, 51, 54, 56, 44, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', square=True, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 48, 45, 53, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 56, 50, 51, 48, 45, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is None:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49, 45, 56, 44, 54, 48, 47, 43, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', square=True, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 45, 51, 54, 56, 48, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 49, 45, 46, 43, 51, 54, 48, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 49, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 50, 48, 43, 56, 46, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', square=True, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 56, 44, 43, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 45, 43, 54, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8292391300201416, "tests_passed": true, "error": null}}
{"selected_lines": [43, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7459008693695068, "tests_passed": true, "error": null}}
{"selected_lines": [54, 45, 46, 48, 53, 47, 50, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 51, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"coolwarm\")\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 46, 54, 53, 48, 56, 45, 51, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is None:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 54, 51, 45, 47, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 45, 54, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 45, 43, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 56, 48, 45, 47, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is None:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', cmap='Blues', cbar=False, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 43, 53, 50, 51, 47, 45, 54, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 43, 47, 46, 53, 48, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Provided number of features does not match number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.5348467826843262, "tests_passed": true, "error": null}}
{"selected_lines": [53, 54, 48, 44, 50, 47, 45, 56, 43, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if len(array) < 1 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 50, 43, 54, 49, 48, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 46, 43, 56, 45, 47, 54, 44, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 44, 43, 46, 54, 47, 50, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or not array.ndim == 2 or array.size == 0:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='RdBu', annot=False, fmt='', ax=ax, square=True, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 45, 50, 54, 56, 47, 53, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 45, 48, 46, 50, 43, 54, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 50, 43, 48, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 45, 50, 51, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 48, 51, 54, 53, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 43, 54, 48, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 48, 47, 44, 56, 50, 49, 45, 46, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 45, 51, 46, 44, 48, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 53, 43, 50, 45, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else np.array([f\"c{i+1}\" for i in range(array.shape[1])]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 46, 43, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2 or len(array) == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4224429130554199, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 46, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 54, 48, 51, 43, 47, 46, 53, 56, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax, cmap='YlGnBu', linewidths=0, cbar_kws={'label': 'Features'})\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 46, 54, 56, 47, 43, 44, 51, 50, 48, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is not None:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 54, 53, 45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 43, 56, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, 1, figsize=(8, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7144649028778076, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.40933918952941895, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 49, 56, 43, 45, 46, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 48, 49, 51, 45, 43, 44, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 53, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', cmap='Blues', cbar=False, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 48, 49, 50, 47, 45, 51, 56, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Provided 'features' list must match the number of columns in the array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 49, 44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array.shape) != 2:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8233799934387207, "tests_passed": true, "error": null}}
{"selected_lines": [54, 56, 44, 47, 51, 53, 45, 49, 43, 46, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 46, 54, 48, 47, 56, 53, 44, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 51, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 44, 53, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 53, 43, 44, 51, 56, 46, 49, 48, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Provided number of features does not match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9157030582427979, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.40319204330444336, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 44, 48, 53, 46, 51, 47, 43, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 47, 46, 53, 43, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Invalid array provided. Array must be non-empty and 2D.')\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 56, 44, 51, 46, 45, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 48, 50, 53, 46, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 51, 54, 56, 45, 48, 44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 53, 50, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 54, 45, 56, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape[0] == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7091341018676758, "tests_passed": true, "error": null}}
{"selected_lines": [56, 47, 53, 54, 50, 46, 51, 43, 48, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is None:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 43, 53, 44, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 45, 49, 48, 56, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 56, 44, 46, 54, 51, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features else range(1, array.shape[1] + 1),\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 51, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='YlGnBu', linewidths=0, cbar_kws={'label': 'Features'})\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 45, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 43, 47, 50, 46, 45, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if len(array.shape) != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 46, 44, 48, 53, 47, 54, 49, 50, 43, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"Empty or non-2D arrays cannot be shuffled.\")\n    if features is None:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41185975074768066, "tests_passed": true, "error": null}}
{"selected_lines": [48, 53, 49, 47, 45, 51, 44, 43, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 50, 46, 45, 51, 43, 44, 56, 53, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if len(array) < 1 or array.ndim != 2:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is None:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 51, 44, 45, 56, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or not array.ndim == 2 or array.size == 0:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(5,5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 56, 49, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if len(array) < 1 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.6980280876159668, "tests_passed": true, "error": null}}
{"selected_lines": [50, 53, 48, 47, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 47, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9280011653900146, "tests_passed": true, "error": null}}
{"selected_lines": [46, 53, 47, 48, 51, 49, 54, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='YlGnBu', linewidths=0, cbar_kws={'label': 'Features'})\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 48, 56, 44, 43, 54, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Provided number of features does not match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(5,5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 56, 43, 47, 48, 44, 45, 50, 51, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"array must not be empty and have 2 dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 51, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='RdBu', annot=False, fmt='', ax=ax, square=True, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 49, 45, 51, 54, 48, 47, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"Invalid 2D array\")\n    if features is None:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 56, 51, 48, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 49, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.732586145401001, "tests_passed": true, "error": null}}
{"selected_lines": [51, 54, 46, 50, 56, 48, 49, 45, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is None:\n        raise ValueError(\"Provided number of features does not match number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='Blues', square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 45, 56, 49, 54, 51, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 48, 54, 49, 44, 50, 51, 47, 53, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(shuffled_array, ax=ax, cmap='YlGnBu', linewidths=0, cbar_kws={'label': 'Features'})\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 44, 48, 46, 43, 50, 51, 49, 54, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 53, 51, 48, 54, 45, 56, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 51, 46, 53, 56, 48, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features else np.array([f\"c{i+1}\" for i in range(array.shape[1])]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 44, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 44, 43, 47, 48, 50, 49, 45, 56, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 44, 56, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"Invalid 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8708269596099854, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": false, "time": 0.0004138946533203125, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [49, 46, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 54, 56, 48, 49, 47, 51, 50, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 54, 56, 51, 46, 53, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 47, 43, 45, 44, 49, 53, 56, 50, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or not array.ndim == 2 or array.size == 0:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', square=True, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 56, 49, 43, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.7649662494659424, "tests_passed": true, "error": null}}
{"selected_lines": [46, 54, 48, 44, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.6918962001800537, "tests_passed": true, "error": null}}
{"selected_lines": [54, 53, 47, 56, 44, 51, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"coolwarm\")\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 43, 44, 54, 56, 46, 45, 47, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is None:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 54, 56, 45, 53, 44, 47, 43, 49, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or array.ndim != 2:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.512908935546875, "tests_passed": true, "error": null}}
{"selected_lines": [46, 53, 47, 43, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Empty or non-2D arrays cannot be shuffled.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 56, 53, 43, 54, 44, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.35619616508483887, "tests_passed": true, "error": null}}
{"selected_lines": [56, 47, 54, 48, 50, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9333400726318359, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 49, 56, 53, 51, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) < 1 or array.ndim != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 50, 44, 45, 51, 46, 48, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 45, 44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Array must be 2D and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7572250366210938, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 48, 47, 45, 50, 51, 44, 53, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 53, 49, 51, 54, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 51, 47, 56, 54, 45, 43, 48, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is None:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 53, 54, 48, 44, 51, 47, 46, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty and must be 2-dimensional, got {len(array.shape)} dimensions\")\n    if features is None:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"coolwarm\")\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 53, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, fmt='')\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 51, 56, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=True)\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.43222784996032715, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 45, 47, 53, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 53, 54, 51, 44, 43, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='RdBu', annot=False, fmt='', ax=ax, square=True, cbar=False)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 53, 43, 56, 54, 50, 51, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 50, 48, 43, 54, 56, 51, 49, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.size(array) == 0:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Provided number of features does not match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.10614991188049316, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [49, 45, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.size(array) == 0:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 51, 45, 54, 46, 48, 56, 50, 53, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8706521987915039, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 47, 48, 43, 51, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is None:\n        raise ValueError(\"Provided number of features does not match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 51, 43, 56, 45, 53, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 54, 45, 56, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 56, 47, 43, 50, 53, 48, 51, 44, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is None:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 50, 49, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 45, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.6913268566131592, "tests_passed": true, "error": null}}
{"selected_lines": [53, 50, 54, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 51, 53, 45, 46, 50, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7463212013244629, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 56, 51, 53, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 46, 53, 44, 50, 51, 47, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"coolwarm\")\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 43, 50, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 44, 56, 43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9288818836212158, "tests_passed": true, "error": null}}
{"selected_lines": [43, 46, 54, 53, 48, 50, 47, 44, 56, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must not be empty and have 2 dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 44, 45, 47, 49, 53, 43, 56, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, 1, figsize=(8, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 53, 44, 45, 56, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41185975074768066, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 54, 50, 48, 56, 46, 49, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 54, 45, 47, 53, 50, 48, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, cmap='RdBu', annot=False, fmt='', ax=ax, square=True, cbar=False)\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 50, 48, 56, 51, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cbar=False, ax=ax,\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4695780277252197, "tests_passed": true, "error": null}}
{"selected_lines": [44, 54, 45, 43, 48, 46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.size(array) == 0:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"array must not be empty and have 2 dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7083511352539062, "tests_passed": true, "error": null}}
{"selected_lines": [47, 54, 48, 53, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.35315871238708496, "tests_passed": true, "error": null}}
{"selected_lines": [53, 47, 44, 56, 43, 46, 48, 54, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.36855006217956543, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 45, 43, 46, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"Empty or non-2D arrays cannot be shuffled.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 44, 56, 50, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(5,5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.8690998554229736, "tests_passed": true, "error": null}}
{"selected_lines": [54, 50, 44, 47, 46, 48, 43, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9008841514587402, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 47, 56, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"coolwarm\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 54, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.9031741619110107, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 56, 46, 48, 54, 49, 43, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.7190420627593994, "tests_passed": true, "error": null}}
{"selected_lines": [56, 49, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.8074419498443604, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 43, 56, 47, 49, 44, 45, 53, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if len(array) < 1 or array.ndim != 2:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(shuffled_array, ax=ax, annot=True)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 48, 47, 51, 43, 44, 54, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 43, 53, 48, 46, 54, 49, 56, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4109821319580078, "tests_passed": true, "error": null}}
{"selected_lines": [43, 54, 45, 49, 56, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 43, 47, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(shuffled_array, cmap='RdBu', annot=False, fmt='', ax=ax, square=True, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 53, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.3762686252593994, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 51, 48, 45, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or not array.ndim == 2 or array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 46, 45, 43, 54, 53, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Array must not be empty or not 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', square=True, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 46, 45, 49, 50, 48, 56, 53, 43, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"Invalid 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='Blues', square=True)\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else np.arange(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9584259986877441, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 3.4178049564361572, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [46, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 53, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7380809783935547, "tests_passed": true, "error": null}}
{"selected_lines": [51, 43, 50, 46, 53, 47, 56, 49, 54, 45, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError(\"Array must be 2D and non-empty.\")\n    if features is not None:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 53, 51, 56, 45, 54, 44, 48, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 56, 43, 49, 54, 51, 46, 47, 53, 48, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is None:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 50, 43, 48, 53, 49, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.size(array) == 0:\n        np.random.seed(seed)\n    if array.size == 0 or array.ndim != 2:\n        raise ValueError('Invalid array provided. Array must be non-empty and 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(5,5))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 53, 47, 51, 43, 48, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"coolwarm\")\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 54, 43, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', square=True, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 56, 48, 46, 53, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(shuffled_array, ax=ax, cmap='Blues', square=True)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 1.0027892589569092, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [49, 51, 44, 56, 43, 45, 50, 47, 48, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(5,5))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 51, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if array.size == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 48, 49, 44, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 56, 48, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 53, 49, 50, 45, 43, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='YlGnBu', linewidths=0, cbar_kws={'label': 'Features'})\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41712117195129395, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7626521587371826, "tests_passed": true, "error": null}}
{"selected_lines": [54, 46, 48, 53, 44, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 53, 49, 54, 51, 44, 43, 46, 50, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4337160587310791, "tests_passed": true, "error": null}}
{"selected_lines": [43, 47, 56, 45, 44, 49, 53, 50, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": false, "time": 0.00040793418884277344, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [56, 44, 48, 45, 49, 51, 54, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"Array must not be empty or not 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 46, 44, 56, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7322659492492676, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 50, 56, 54, 43, 47, 46, 53, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 46, 56, 48, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9546809196472168, "tests_passed": true, "error": null}}
{"selected_lines": [56, 45, 54, 49, 53, 51, 48, 46, 43, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 47, 54, 56, 50, 45, 48, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is not None:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 44, 53, 56, 46, 49, 48, 47, 45, 43, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 51, 49, 48, 53, 44, 46, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 44, 47, 43, 48, 45, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41159605979919434, "tests_passed": true, "error": null}}
{"selected_lines": [53, 56, 43, 45, 49, 48, 54, 50, 47, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 51, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 53, 49, 56, 46, 43, 44, 50, 54, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"array must not be empty and have 2 dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 49, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 48, 45, 51, 43, 46, 44, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 48, 44, 56, 50, 47, 43, 46, 45, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 51, 43, 56, 53, 45, 48, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(f\"Provided 'features' list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 53, 46, 48, 44, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', cmap='Blues', cbar=False, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 49, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8051619529724121, "tests_passed": true, "error": null}}
{"selected_lines": [53, 44, 54, 50, 56, 45, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.14781999588012695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [53, 46, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 54, 46, 48, 51, 50, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 56, 46, 53, 47, 54, 45, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else np.array([f\"c{i+1}\" for i in range(array.shape[1])]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 47, 49, 56, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is None:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 46, 53, 50, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 56, 54, 46, 48, 53, 50, 43, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is None:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(5,5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 53, 48, 50, 56, 49, 51, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or not array.ndim == 2 or array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 47, 51, 50, 45, 54, 44, 56, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='YlGnBu', linewidths=0, cbar_kws={'label': 'Features'})\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 43, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 43, 44, 49, 54, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is None:\n        raise ValueError(f\"Provided 'features' list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 46, 53, 45, 44, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or not array.ndim == 2 or array.size == 0:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 48, 47, 54, 46, 51, 44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Invalid array provided. Array must be non-empty and 2D.')\n    if features is not None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 48, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cbar=False, ax=ax,\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 44, 47, 46, 50, 48, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7316670417785645, "tests_passed": true, "error": null}}
{"selected_lines": [49, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else np.arange(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9084250926971436, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 50, 54, 47, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4373459815979004, "tests_passed": true, "error": null}}
{"selected_lines": [48, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 49, 43, 45, 50, 56, 47, 46, 54, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the array.\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.942155122756958, "tests_passed": true, "error": null}}
{"selected_lines": [43, 51, 53, 47, 48, 49, 44, 50, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cbar=False, ax=ax,\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 51, 48, 46, 56, 53, 44, 49, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 44, 46, 43, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 44, 56, 50, 43, 48, 53, 46, 54, 49, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 50, 56, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', square=True, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9589939117431641, "tests_passed": true, "error": null}}
{"selected_lines": [50, 43, 47, 49, 54, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape[0] == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 54, 44, 43, 56, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 48, 54, 45, 49, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 45, 46, 48, 47, 50, 44, 54, 43, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 47, 54, 53, 50, 48, 49, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 48, 47, 54, 53, 49, 45, 46, 43, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 49, 44, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7927279472351074, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 56, 44, 46, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 47, 53, 43, 44, 48, 50, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 48, 44, 45, 53, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 44, 47, 54, 50, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 46, 53, 54, 49, 45, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, 1, figsize=(8, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 45, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7995877265930176, "tests_passed": true, "error": null}}
{"selected_lines": [50, 56, 51, 45, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 47, 43, 45, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape[0] == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError(f\"'array' must not be empty and must be 2-dimensional, got {len(array.shape)} dimensions\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 54, 43, 51, 53, 49, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 53, 48, 47, 44, 56, 49, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.43222784996032715, "tests_passed": true, "error": null}}
{"selected_lines": [56, 53, 47, 54, 44, 45, 49, 50, 46, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 44, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 56, 54, 48, 43, 53, 49, 50, 47, 45, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 56, 47, 48, 51, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 1.1548631191253662, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 49, 50, 54, 45, 53, 47, 48, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or not array.ndim == 2 or array.size == 0:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 43, 53, 45, 49, 50, 51, 56, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 48, 54, 43, 56, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.43222784996032715, "tests_passed": true, "error": null}}
{"selected_lines": [56, 53, 51, 43, 44, 48, 45, 46, 54, 49, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 51, 54, 50, 43, 53, 48, 45, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is None:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 48, 56, 47, 44, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 56, 46, 47, 50, 48, 53, 49, 45, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is None:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else np.arange(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 50, 48, 46, 56, 54, 49, 47, 43, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is not None:\n        raise ValueError(\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Invalid 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7850751876831055, "tests_passed": true, "error": null}}
{"selected_lines": [48, 53, 50, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 46, 54, 49, 48, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 45, 53, 56, 51, 49, 50, 43, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is None:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 48, 44, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 53, 51, 45, 44, 48, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 47, 49, 54, 51, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 47, 45, 50, 46, 48, 56, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is None:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 48, 50, 47, 44, 46, 43, 45, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 47, 56, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape[0] == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"array must not be empty and have 2 dimensions\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 51, 48, 56, 46, 53, 49, 45, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is None:\n        raise ValueError(\"Length of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 50, 47, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.905919075012207, "tests_passed": true, "error": null}}
{"selected_lines": [51, 43, 45, 54, 44, 49, 53, 46, 48, 50, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2 or len(array) == 0:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(f\"'array' must not be empty and must be 2-dimensional, got {len(array.shape)} dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 47, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 53, 44, 43, 47, 54, 45, 46, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is not None:\n        raise ValueError(\"Features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(5,5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7396910190582275, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.40470027923583984, "tests_passed": true, "error": null}}
{"selected_lines": [56, 46, 53, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 48, 50, 56, 51, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features if features else np.arange(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 43, 48, 44, 47, 49, 51, 50, 46, 56, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Invalid 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 4.72613787651062, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 47, 44, 51, 53, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 53, 43, 50, 51, 48, 46, 44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Invalid array provided. Array must be non-empty and 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.22437000274658203, "tests_passed": true, "error": null}}
{"selected_lines": [56, 43, 46, 54, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 43, 51, 45, 49, 54, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41712117195129395, "tests_passed": true, "error": null}}
{"selected_lines": [45, 53, 46, 47, 51, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 47, 56, 44, 50, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else np.array([f\"c{i+1}\" for i in range(array.shape[1])]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.6839559078216553, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 56, 45, 43, 44, 46, 51, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 53, 49, 56, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 56, 47, 53, 51, 54, 48, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is None:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else np.array([f\"c{i+1}\" for i in range(array.shape[1])]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 45, 54, 51, 46, 53, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', cmap='Blues', cbar=False, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9229440689086914, "tests_passed": true, "error": null}}
{"selected_lines": [56, 43, 46, 54, 51, 49, 50, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 54, 47, 56, 44, 46, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='RdBu', annot=False, fmt='', ax=ax, square=True, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 47, 51, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cbar=False, ax=ax,\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.14781999588012695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [44, 56, 46, 49, 53, 54, 50, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 44, 51, 46, 43, 56, 50, 48, 49, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the input array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4149458408355713, "tests_passed": true, "error": null}}
{"selected_lines": [50, 56, 46, 43, 51, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 53, 51, 46, 47, 49, 44, 45, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array.shape) != 2:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"coolwarm\")\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 53, 43, 47, 44, 51, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Length of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 44, 45, 50, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 53, 47, 51, 50, 54, 56, 45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 53, 56, 47, 45, 44, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='Blues', square=True)\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 49, 51, 48, 56, 44, 45, 53, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 44, 51, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', cmap='Blues', cbar=False, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 53, 44, 49, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 50, 43, 51, 46, 47, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(shuffled_array, annot=True, fmt='', cmap='Blues', cbar=False, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.7144651412963867, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 44, 54, 53, 49, 48, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 1.1095590591430664, "tests_passed": true, "error": null}}
{"selected_lines": [49, 54, 51, 43, 50, 47, 46, 48, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"coolwarm\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 54, 56, 51, 46, 45, 53, 49, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 43, 46, 44, 56, 49, 50, 54, 47, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features if features else np.array([f\"c{i+1}\" for i in range(array.shape[1])]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 43, 44, 49, 45, 54, 50, 47, 46, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Array must not be empty or not 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": false, "time": 0.0004010200500488281, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.43862009048461914, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 50, 43, 51, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', cmap='Blues', cbar=False, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 53, 51, 45, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 56, 45, 49, 44, 48, 54, 43, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else np.arange(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 47, 44, 48, 51, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 56, 46, 45, 49, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 56, 50, 43, 46, 53, 49, 47, 54, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2 or len(array) == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is None:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 51, 50, 48, 46, 49, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must not be empty and have 2 dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 43, 49, 53, 45, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.7341392040252686, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 46, 45, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 43, 49, 56, 47, 54, 48, 51, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41159605979919434, "tests_passed": true, "error": null}}
{"selected_lines": [43, 47, 48, 50, 45, 44, 54, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Empty or non-2D arrays cannot be shuffled.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 46, 45, 44, 49, 43, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 45, 53, 50, 46, 48, 44, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array.shape) != 2:\n        raise ValueError(\"Empty or non-2D arrays cannot be shuffled.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features else np.arange(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9584259986877441, "tests_passed": true, "error": null}}
{"selected_lines": [54, 45, 53, 49, 44, 50, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape[0] == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or not array.ndim == 2 or array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 45, 50, 48, 54, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=True)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 49, 43, 54, 48, 46, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 44, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 47, 53, 46, 49, 50, 48, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None:\n        raise ValueError(\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 54, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 51, 45, 49, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(shuffled_array, ax=ax, cmap='YlGnBu', linewidths=0, cbar_kws={'label': 'Features'})\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 51, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must not be empty and have 2 dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cbar=False, ax=ax,\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 54, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.767183780670166, "tests_passed": true, "error": null}}
{"selected_lines": [54, 46, 49, 51, 47, 44, 53, 50, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be 2D and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 45, 48, 54, 46, 56, 49, 43, 51, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is None:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', square=True, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 44, 46, 50, 47, 43, 45, 51, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.3637816905975342, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 45, 50, 48, 46, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 56, 48, 51, 44, 47, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, 1, figsize=(8, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 51, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be 2D and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 54, 44, 48, 49, 47, 46, 56, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is not None:\n        raise ValueError(\"Length of features must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 50, 47, 51, 56, 53, 46, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 43, 50, 53, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9537692070007324, "tests_passed": true, "error": null}}
{"selected_lines": [51, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 46, 48, 47, 53, 51, 49, 45, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Array must not be empty or not 2-dimensional\")\n    if features is None:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 43, 50, 53, 45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2 or len(array) == 0:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7254500389099121, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 46, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 47, 44, 53, 46, 45, 51, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 47, 50, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Empty or non-2D arrays cannot be shuffled.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 47, 48, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": false, "time": 0.0007450580596923828, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [48, 54, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Provided number of features does not match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 53, 43, 45, 51, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 53, 51, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape[0] == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.46727585792541504, "tests_passed": true, "error": null}}
{"selected_lines": [54, 45, 46, 50, 43, 56, 47, 49, 44, 53, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is None:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 44, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 54, 51, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 51, 54, 48, 45, 53, 43, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 56, 45, 46, 54, 49, 48, 44, 47, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Array must not be empty or not 2-dimensional\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 56, 45, 43, 51, 49, 46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='Blues', square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 43, 54, 45, 44, 53, 46, 51, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 49, 43, 44, 48, 46, 51, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 53, 43, 45, 46, 47, 44, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 54, 51, 45, 44, 49, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 43, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 49, 50, 56, 43, 54, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 51, 56, 49, 50, 44, 45, 46, 53, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is None:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, annot=True, fmt='', cmap='Blues', cbar=False, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else np.arange(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 46, 43, 56, 44, 54, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 49, 54, 56, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 47, 56, 44, 43, 50, 49, 48, 45, 51, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be 2D and non-empty.\")\n    if features is None:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 54, 45, 49, 51, 43, 48, 44, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 53, 54, 56, 43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else np.arange(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9086620807647705, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.46753907203674316, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41712117195129395, "tests_passed": true, "error": null}}
{"selected_lines": [44, 56, 53, 45, 54, 48, 46, 50, 51, 43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, fmt='')\n        shuffled_array,\n        xticklabels=features if features else np.array([f\"c{i+1}\" for i in range(array.shape[1])]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 43, 48, 53, 45, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 46, 48, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 49, 56, 53, 43, 44, 45, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.size(array) == 0:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.788383960723877, "tests_passed": true, "error": null}}
{"selected_lines": [49, 54, 53, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else range(1, array.shape[1] + 1),\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.7738051414489746, "tests_passed": true, "error": null}}
{"selected_lines": [44, 54, 49, 48, 50, 46, 45, 43, 47, 56, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 43, 45, 51, 44, 46, 49, 53, 56, 50, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or not array.ndim == 2 or array.size == 0:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 56, 44, 50, 53, 51, 54, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features else np.array([f\"c{i+1}\" for i in range(array.shape[1])]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 50, 46, 49, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 43, 56, 44, 46, 54, 45, 48, 49, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features is not None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 44, 51, 45, 53, 56, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 44, 43, 53, 48, 45, 50, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 54, 44, 49, 56, 45, 48, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is None:\n        raise ValueError(\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 53, 50, 54, 51, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 56, 47, 50, 43, 45, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 53, 48, 47, 51, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Length of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"coolwarm\")\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 48, 45, 46, 56, 44, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError(\"Empty or non-2D arrays cannot be shuffled.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Provided number of features does not match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8954927921295166, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 53, 54, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 47, 51, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 46, 49, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.714850664138794, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.04266977310180664, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [43, 53, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 51, 45, 44, 46, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 51, 46, 53, 45, 47, 48, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Invalid array provided. Array must be non-empty and 2D.')\n    if features is None:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 48, 56, 53, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 43, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7732729911804199, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 44, 51, 46, 47, 56, 54, 43, 45, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2 or len(array) == 0:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(shuffled_array, ax=ax, annot=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 50, 47, 54, 44, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 54, 48, 45, 56, 51, 53, 47, 50, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax, annot=True)\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 48, 45, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 43, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9275691509246826, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 53, 46, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Invalid 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.732288122177124, "tests_passed": true, "error": null}}
{"selected_lines": [54, 45, 53, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) < 1 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.36289310455322266, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 51, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 48, 53, 54, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Invalid array provided. Array must be non-empty and 2D.')\n    if features is None:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 47, 45, 49, 48, 51, 53, 56, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"coolwarm\")\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 46, 45, 43, 44, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Provided 'features' list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 47, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 54, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 54, 48, 45, 46, 56, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 44, 54, 48, 43, 53, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', cmap='Blues', cbar=False, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": false, "time": 0.0003139972686767578, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [48, 56, 51, 43, 54, 46, 47, 45, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape[0] == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is None:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4796559810638428, "tests_passed": true, "error": null}}
{"selected_lines": [56, 50, 49, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9755492210388184, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 47, 44, 48, 43, 54, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 53, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 54, 47, 45, 56, 48, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2 or len(array) == 0:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Provided 'features' list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7265636920928955, "tests_passed": true, "error": null}}
{"selected_lines": [53, 56, 54, 50, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 47, 53, 50, 48, 56, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Empty or non-2D arrays cannot be shuffled.\")\n    if features is None:\n        raise ValueError(\"Provided number of features does not match number of columns in the array.\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 53, 51, 49, 45, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 53, 54, 56, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 44, 49, 46, 45, 56, 53, 48, 50, 47, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 49, 44, 47, 43, 54, 50, 51, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else np.arange(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 45, 43, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape[0] == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 56, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8003659248352051, "tests_passed": true, "error": null}}
{"selected_lines": [45, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8762719631195068, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 48, 56, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 53, 46, 43, 45, 49, 50, 51, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 56, 48, 47, 45, 46, 49, 44, 53, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if len(array.shape) != 2:\n        raise ValueError('Invalid array provided. Array must be non-empty and 2D.')\n    if features is None:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty and must be 2-dimensional, got {len(array.shape)} dimensions\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 48, 50, 54, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else np.array([f\"c{i+1}\" for i in range(array.shape[1])]),\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.35509514808654785, "tests_passed": true, "error": null}}
{"selected_lines": [53, 43, 50, 46, 54, 48, 44, 56, 51, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 50, 43, 53, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7882969379425049, "tests_passed": true, "error": null}}
{"selected_lines": [44, 56, 48, 47, 49, 51, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 56, 48, 47, 45, 49, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Provided number of features does not match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 1.0044081211090088, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [54, 45, 46, 47, 50, 56, 49, 48, 51, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.7970318794250488, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 44, 49, 43, 50, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 46, 45, 44, 49, 51, 48, 50, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 56, 45, 53, 50, 47, 51, 48, 46, 49, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Invalid array provided. Array must be non-empty and 2D.')\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 43, 51, 46, 45, 56, 44, 53, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 44, 45, 46, 48, 50, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9966962337493896, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 45, 48, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 53, 46, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must not be empty and have 2 dimensions\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 48, 56, 47, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', cmap='Blues', cbar=False, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 56, 46, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 49, 43, 51, 54, 47, 56, 48, 46, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape[0] == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 48, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.726222038269043, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 49, 53, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) < 1 or array.ndim != 2:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 56, 46, 45, 49, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"coolwarm\")\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 51, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41185975074768066, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 43, 44, 50, 49, 53, 48, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 51, 54, 44, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 44, 49, 50, 53, 45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 45, 51, 43, 47, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 46, 49, 47, 44, 50, 53, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 46, 45, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 47, 43, 44, 51, 50, 48, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=True)\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49, 56, 44, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 48, 50, 56, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 43, 49, 56, 54, 44, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 54, 43, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 46, 50, 48, 44, 43, 51, 45, 49, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is None:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(shuffled_array, ax=ax, annot=False, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 47, 43, 50, 51, 48, 54, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.3560917377471924, "tests_passed": true, "error": null}}
{"selected_lines": [54, 51, 50, 45, 48, 56, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 56, 45, 51, 48, 46, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or not array.ndim == 2 or array.size == 0:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is None:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 51, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cbar=False, ax=ax,\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 53, 43, 54, 48, 50, 46, 44, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', cmap='Blues', cbar=False, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 44, 56, 45, 46, 47, 54, 53, 50, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or array.ndim != 2:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 54, 44, 47, 48, 46, 56, 50, 51, 53, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.size(array) == 0:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41712117195129395, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41185975074768066, "tests_passed": true, "error": null}}
{"selected_lines": [56, 53, 50, 45, 44, 46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"Array must not be empty or not 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 44, 51, 45, 50, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 56, 46, 53, 50, 54, 44, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.722642183303833, "tests_passed": true, "error": null}}
{"selected_lines": [49, 43, 45, 51, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 44, 54, 51, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.size(array) == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 44, 53, 45, 43, 54, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 50, 53, 48, 43, 44, 47, 56, 45, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 51, 54, 46, 56, 44, 50, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 46, 43, 53, 51, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, fmt='')\n        shuffled_array,\n        xticklabels=features if features else np.array([f\"c{i+1}\" for i in range(array.shape[1])]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 51, 49, 48, 50, 45, 43, 46, 54, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 51, 56, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.size(array) == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 49, 48, 46, 56, 51, 54, 53, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or array.ndim != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 45, 54, 50, 51, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41159605979919434, "tests_passed": true, "error": null}}
{"selected_lines": [50, 54, 47, 53, 49, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 56, 43, 54, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2 or len(array) == 0:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 1.0030789375305176, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [49, 47, 43, 53, 56, 54, 46, 50, 44, 45, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 47, 43, 54, 53, 51, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2 or len(array) == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='Blues', square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 54, 53, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"coolwarm\")\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 56, 49, 45, 51, 48, 54, 53, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7058837413787842, "tests_passed": true, "error": null}}
{"selected_lines": [45, 56, 50, 53, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 47, 48, 50, 53, 54, 56, 44, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is None:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8710691928863525, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 56, 54, 48, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 56, 48, 49, 45, 51, 50, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 49, 56, 50, 45, 46, 48, 43, 54, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2 or len(array) == 0:\n        np.random.seed(seed)\n    if len(array.shape) != 2:\n        raise ValueError(\"Empty or non-2D arrays cannot be shuffled.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 48, 56, 47, 46, 50, 54, 43, 53, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"array must not be empty and have 2 dimensions\")\n    if features is None:\n        raise ValueError(f\"Provided 'features' list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 47, 51, 45, 46, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Array must not be empty or not 2-dimensional\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cbar=False, ax=ax,\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 49, 54, 56, 51, 45, 47, 48, 46, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.size(array) == 0:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4656801223754883, "tests_passed": true, "error": null}}
{"selected_lines": [49, 56, 44, 45, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 53, 50, 43, 48, 49, 56, 45, 47, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is None:\n        raise ValueError(f\"Provided 'features' list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 51, 45, 43, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or not array.ndim == 2 or array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 53, 46, 47, 54, 48, 44, 45, 49, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if len(array) < 1 or array.ndim != 2:\n        raise ValueError('Invalid array provided. Array must be non-empty and 2D.')\n    if features is None:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 56, 44, 48, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.7039108276367188, "tests_passed": true, "error": null}}
{"selected_lines": [53, 48, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.43222784996032715, "tests_passed": true, "error": null}}
{"selected_lines": [54, 45, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.8303589820861816, "tests_passed": true, "error": null}}
{"selected_lines": [54, 47, 53, 45, 50, 49, 44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array.shape) != 2:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 50, 54, 45, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots(figsize=(5,5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8945059776306152, "tests_passed": true, "error": null}}
{"selected_lines": [45, 54, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7205641269683838, "tests_passed": true, "error": null}}
{"selected_lines": [56, 51, 48, 53, 43, 50, 54, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be 2D and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 53, 43, 51, 56, 47, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.size(array) == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 45, 56, 47, 43, 49, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 43, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.7204880714416504, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 48, 45, 56, 49, 50, 53, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(1, 1, figsize=(8, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 46, 49, 44, 48, 56, 54, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 51, 46, 53, 43, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 48, 53, 49, 50, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 53, 47, 46, 44, 49, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or not array.ndim == 2 or array.size == 0:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9493842124938965, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 46, 43, 50, 45, 54, 53, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 56, 47, 48, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 46, 50, 54, 56, 47, 49, 48, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Invalid 2D array\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 47, 43, 56, 53, 48, 45, 54, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(5,5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 48, 43, 50, 51, 47, 53, 46, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7634809017181396, "tests_passed": true, "error": null}}
{"selected_lines": [45, 53, 44, 46, 47, 48, 49, 56, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Features list must match the number of columns in the array (i.e., {array.shape[1]}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.36211514472961426, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 51, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 46, 50, 54, 49, 53, 43, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 44, 45, 47, 51, 56, 50, 43, 48, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 44, 56, 43, 53, 50, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) < 1 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.361346960067749, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.40748000144958496, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41712117195129395, "tests_passed": true, "error": null}}
{"selected_lines": [50, 43, 56, 45, 54, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 49, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 43, 44, 46, 54, 49, 45, 51, 47, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.46639108657836914, "tests_passed": true, "error": null}}
{"selected_lines": [54, 46, 44, 51, 56, 50, 43, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 50, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.9484210014343262, "tests_passed": true, "error": null}}
{"selected_lines": [47, 56, 54, 48, 45, 44, 43, 50, 53, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 51, 53, 44, 47, 50, 45, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 53, 51, 54, 48, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features:\n        raise ValueError(f\"Provided 'features' list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"Column {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 44, 43, 45, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 45, 56, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 50, 53, 56, 45, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, cbar=False, ax=ax,\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 46, 53, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7108380794525146, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.39753293991088867, "tests_passed": true, "error": null}}
{"selected_lines": [50, 56, 46, 53, 54, 51, 49, 47, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError('Invalid array provided. Array must be non-empty and 2D.')\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 53, 49, 46, 48, 56, 44, 51, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=True)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4015991687774658, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9324538707733154, "tests_passed": true, "error": null}}
{"selected_lines": [49, 53, 48, 47, 54, 44, 43, 45, 56, 46, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2 or len(array) == 0:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is None:\n        raise ValueError(\"Provided number of features does not match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty and must be 2-dimensional, got {len(array.shape)} dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.707273006439209, "tests_passed": true, "error": null}}
{"selected_lines": [54, 50, 45, 47, 46, 53, 56, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"Array must be 2D and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 1.090113878250122, "tests_passed": true, "error": null}}
{"selected_lines": [49, 53, 48, 45, 50, 43, 44, 47, 51, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 53, 54, 46, 51, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 49, 54, 48, 44, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Provided number of features does not match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 47, 56, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features is None:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.40933918952941895, "tests_passed": true, "error": null}}
{"selected_lines": [45, 51, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='Blues', square=True)\n        shuffled_array,\n        xticklabels=features if features else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 54, 53, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Invalid 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 49, 44, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7927279472351074, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 46, 53, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9347290992736816, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 50, 43, 45, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 43, 49, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2 or len(array) == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7173361778259277, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 51, 49, 53, 46, 43, 48, 56, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError('Invalid array provided. Array must be non-empty and 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 43, 47, 53, 50, 51, 54, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2-dimensional\")\n    if features is None:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='Blues', square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 50, 46, 56, 49, 43, 54, 47, 53, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 43, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9447872638702393, "tests_passed": true, "error": null}}
{"selected_lines": [53, 51, 43, 44, 54, 50, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 50, 43, 51, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else np.arange(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4788210391998291, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.41027116775512695, "tests_passed": true, "error": null}}
{"selected_lines": [43, 51, 49, 44, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2 or len(array) == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', square=True, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.43222784996032715, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": false, "time": 0.0005197525024414062, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [48, 45, 50, 44, 53, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 53, 51, 45, 50, 43, 54, 48, 47, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is None:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 46, 48, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 56, 50, 45, 48, 44, 43, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.size(array) == 0:\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 50, 56, 53, 43, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else range(1, array.shape[1] + 1),\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 1.1545300483703613, "tests_passed": true, "error": null}}
{"selected_lines": [43, 53, 46, 49, 50, 45, 48, 54, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError('Invalid array provided. Array must be non-empty and 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 47, 44, 54, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 43, 49, 51, 46, 47, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 51, 50, 47, 44, 53, 46, 48, 45, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is None:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cbar=False, ax=ax,\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 54, 46, 48, 51, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the input array.\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 53, 46, 44, 43, 51, 47, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 54, 56, 49, 53, 51, 50, 43, 44, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 56, 51, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 50, 44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.760491132736206, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 53, 51, 44, 49, 56, 47, 54, 46, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 51, 50, 56, 48, 47, 53, 45, 54, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is None:\n        raise ValueError(\"Length of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 43, 49, 45, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 53, 56, 49, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 53, 43, 56, 50, 54, 48, 46, 44, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 54, 43, 46, 49, 51, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if array.size == 0 or array.ndim != 2:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=True)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 43, 51, 45, 53, 56, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape[0] == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 53, 54, 51, 49, 47, 56, 50, 44, 43, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9197478294372559, "tests_passed": true, "error": null}}
{"selected_lines": [43, 51, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 53, 44, 51, 56, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 44, 56, 45, 47, 54, 53, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 48, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7879948616027832, "tests_passed": true, "error": null}}
{"selected_lines": [51, 43, 49, 45, 44, 56, 47, 50, 46, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(5,5))\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 54, 44, 47, 48, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 45, 43, 46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(f\"'array' must not be empty and must be 2-dimensional, got {len(array.shape)} dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7590370178222656, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', square=True, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": false, "time": 0.000392913818359375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [48, 46, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.3619370460510254, "tests_passed": true, "error": null}}
{"selected_lines": [43, 47, 46, 51, 53, 44, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape[0] == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', square=True, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 49, 50, 48, 56, 44, 46, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 54, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 53, 54, 51, 46, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 44, 49, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8714208602905273, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.43222784996032715, "tests_passed": true, "error": null}}
{"selected_lines": [49, 53, 46, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.14781999588012695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [49, 47, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 56, 48, 53, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='RdBu', annot=False, fmt='', ax=ax, square=True, cbar=False)\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Empty or non-2D arrays cannot be shuffled.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4238448143005371, "tests_passed": true, "error": null}}
{"selected_lines": [53, 46, 45, 48, 56, 50, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 53, 45, 44, 56, 43, 51, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 45, 43, 53, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 53, 45, 56, 50, 54, 43, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.35352516174316406, "tests_passed": true, "error": null}}
{"selected_lines": [43, 46, 48, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.77056884765625, "tests_passed": true, "error": null}}
{"selected_lines": [54, 46, 48, 56, 47, 43, 45, 50, 44, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 47, 53, 44, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=True)\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 53, 43, 51, 46, 49, 50, 44, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 54, 53, 45, 43, 46, 48, 44, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if len(array) < 1 or array.ndim != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is None:\n        raise ValueError(\"Provided number of features does not match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 56, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9241819381713867, "tests_passed": true, "error": null}}
{"selected_lines": [54, 56, 44, 46, 50, 43, 49, 45, 53, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"The number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 45, 53, 54, 51, 44, 46, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.size(array) == 0:\n        np.random.seed(seed)\n    if array.size == 0 or array.ndim != 2:\n        raise ValueError(\"array must not be empty and have 2 dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', square=True, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 56, 45, 51, 53, 50, 44, 48, 47, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if not features:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is None:\n        raise ValueError(\"Provided number of features does not match number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 46, 53, 44, 43, 51, 47, 48, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7071399688720703, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4232807159423828, "tests_passed": true, "error": null}}
{"selected_lines": [53, 56, 45, 51, 44, 49, 47, 46, 43, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 44, 49, 54, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 54, 56, 44, 43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 47, 44, 48, 50, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8830718994140625, "tests_passed": true, "error": null}}
{"selected_lines": [43, 47, 51, 45, 46, 50, 49, 56, 48, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is not None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(shuffled_array, annot=True, fmt='', cmap='Blues', cbar=False, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4918100833892822, "tests_passed": true, "error": null}}
{"selected_lines": [45, 51, 44, 50, 53, 46, 54, 56, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"array must not be empty and have 2 dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.10414814949035645, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [43, 56, 49, 54, 53, 47, 44, 50, 48, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 49, 44, 51, 53, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(shuffled_array, annot=True, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 45, 54, 53, 56, 49, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 53, 56, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 44, 43, 53, 46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features or ['A', 'B', 'C', 'D', 'E'],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 43, 49, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 44, 56, 48, 45, 49, 54, 46, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError(\"Input array must be a non-empty 2D numpy array\")\n    if features is None:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": false, "time": 0.0005197525024414062, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": false, "time": 0.0007081031799316406, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [43, 51, 50, 47, 49, 56, 48, 53, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(f\"Provided 'features' list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 53, 50, 43, 45, 54, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 54, 50, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, cmap='RdBu', annot=False, fmt='', ax=ax, square=True, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 54, 56, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Feature list must match the number of columns in the input array (found {len(features)}).\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7794399261474609, "tests_passed": true, "error": null}}
{"selected_lines": [53, 46, 51, 49, 54, 44, 56, 47, 45, 43, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Empty or non-2D arrays cannot be shuffled.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 46, 47, 43, 49, 44, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 47, 45, 48, 50, 43, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same length as the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 47, 56, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 43, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 45, 49, 46, 51, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of provided features must match number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 50, 56, 48, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.022690773010253906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [48, 47, 54, 56, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='Blues', square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 56, 54, 43, 51, 47, 44, 46, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) < 1 or array.ndim != 2:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 45, 56, 51, 43, 53, 50, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else f\"{array.shape[1]+1} features\",\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 46, 51, 48, 50, 49, 43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is None:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', cmap='Blues', cbar=False, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 44, 50, 49, 45, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 51, 56, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, fmt=\".1%\",\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 53, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 56, 43, 45, 44, 49, 54, 50, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.10414814949035645, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [44, 54, 50, 56, 43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 43, 50, 45, 53, 56, 49, 46, 44, 47, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.35727405548095703, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.512908935546875, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 50, 43, 49, 45, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if not features:\n        raise ValueError('Invalid 2D numpy array.')\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 43, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Invalid array provided. Array must be non-empty and 2D.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 54, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7205641269683838, "tests_passed": true, "error": null}}
{"selected_lines": [49, 53, 47, 44, 51, 50, 54, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cmap='Blues', fmt='')\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 56, 49, 45, 44, 53, 50, 48, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or array.ndim != 2:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 54, 56, 53, 45, 51, 47, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.shape(array)[0] == 0:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.copy(array)\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    sns.heatmap(shuffled_array, ax=ax, square=True, annot=False, fmt=\"\", cmap=\"RdYlGn_r\")\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 51, 48, 49, 47, 43, 45, 46, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"'array' must not be empty and must be 2-dimensional.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 45, 54, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 50, 53, 54, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features:\n        raise ValueError(\"Length of 'features' must match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 49, 48, 51, 50, 54, 56, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 54, 46, 45, 47, 56, 44, 49, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray):\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 54, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 54, 48, 46, 43, 56, 44, 51, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"coolwarm\")\n        shuffled_array,\n        xticklabels=features if features else np.array([f\"c{i+1}\" for i in range(array.shape[1])]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 47, 54, 43, 51, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 56, 44, 43, 49, 46, 47, 48, 50, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 56, 47, 51, 46, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 49, 44, 56, 45, 48, 43, 54, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 53, 45, 51, 48, 56, 43, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError(\"'array' must be non-empty 2D numpy array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax, cbar=False, cbar_kws=None, cbar_size='none',\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 53, 46, 56, 51, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features else [str(i + 1) for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 45, 50, 49, 51, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu_r\", xticklabels=features if features else range(1, array.shape[1] + 1),\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 54, 46, 56, 53, 44, 51, 49, 50, 48, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 54, 48, 56, 43, 46, 51, 50, 49, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Number of provided features must match the number of columns in the given array.\\\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 47, 50, 51, 56, 45, 53, 49, 54, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None:\n        raise ValueError(\"Length of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 48, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else ['Column {}'.format(i + 1) for i in range(len(array.T))],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 46, 53, 45, 54, 56, 50, 48, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] == 0:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The number of provided features does not match the number of columns in 'array'.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 45, 43, 49, 54, 46, 51, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=False, cbar=False)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 49, 50, 51, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.size == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=False, cmap=\"Blues\", ax=ax, fmt='')\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 47, 53, 44, 46, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 46, 43, 49, 47, 44, 53, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2 or len(array) == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 51, 53, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 48, 47, 50, 43, 53, 45, 44, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 51, 43, 48, 54, 46, 50, 45, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.shape == (0,):\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray) or array.ndim != 2 or array.size == 0:\n        raise ValueError(f\"'array' must not be empty or not a 2D array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Provided 'features' list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", fmt=\".2f\", ax=ax)\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 49, 56, 51, 47, 50, 44, 45, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"'array' must be a 2D numpy array with at least one row.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='RdBu', annot=False, linewidths=0, square=True, fmt='')\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 43, 56, 50, 51, 49, 54, 45, 47, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape[0] == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError(f\"'array' must not be empty and must be 2-dimensional, got {len(array.shape)} dimensions\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features else np.arange(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 44, 46, 49, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"The array must be non-empty 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"column {i}\" for i in range(1, array.shape[1] + 1)],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.3598310947418213, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 49, 51, 48, 53, 56, 43, 54, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is not None:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is None:\n        raise ValueError(\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cbar=False, ax=ax,\n        shuffled_array,\n        xticklabels=features if features is not None else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.4481086730957031, "tests_passed": true, "error": null}}
{"selected_lines": [43, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2 or len(array) == 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 54, 45, 50, 56, 48, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(1, 1, figsize=(8, 5))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 56, 46, 51, 45, 53, 43, 50, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError(\"Array must not be empty or not 2D.\")\n    if features is not None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 47, 54, 48, 44, 49, 45, 51, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not features or len(features) != array.shape[1]:\n        raise ValueError(\"Array must not be empty or not 2-dimensional\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 56, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"col {i + 1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.22437000274658203, "tests_passed": true, "error": null}}
{"selected_lines": [43, 46, 50, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array.shape) != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Invalid 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.9344332218170166, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None:\n        raise ValueError(\"Features list must match the number of columns in the input array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 46, 54, 50, 53, 51, 47, 48, 43, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 49, 54, 51, 53, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape == (0,):\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must not be empty and must be a 2D array.')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(shuffled_array, cmap='RdBu', annot=False, fmt='', ax=ax, square=True, cbar=False)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 44, 47, 45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('Empty array or not 2-dimensional')\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 56, 46, 50, 47, 53, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"'array' must not be empty or be two-dimensional.\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    sns.heatmap(shuffled_array, ax=ax, cmap=\"RdBu\")\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 45, 46, 56, 51, 50, 54, 49, 43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Array must be a non-empty 2D array\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 47, 51, 54, 46, 48, 49, 43, 45, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features is not None and len(features) != array.shape[1]:\n        np.random.seed(seed)\n    if len(array) == 0 or len(array.shape) != 2:\n        raise ValueError('The input array must not be empty or not 2D.')\n    if features is None:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, square=True)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 46, 43, 54, 50, 53, 56, 49, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7917678356170654, "tests_passed": true, "error": null}}
{"selected_lines": [53, 56, 49, 43, 44, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7129430770874023, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 48, 44, 50, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(shuffled_array, ax=ax, cmap='Blues', square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must have the same number of elements as the columns of the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8734867572784424, "tests_passed": true, "error": null}}
{"selected_lines": [48, 53, 50, 43, 54, 56, 49, 45, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.size(array) == 0:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is None:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = array[:, np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 45, 54, 56, 44, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"array must not be empty and have 2 dimensions\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7587769031524658, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 44, 50, 47, 56, 46, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.shape[0] > 0 and array.ndim == 2:\n        raise ValueError(\"'array' must be a non-empty 2-dimensional numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 44, 45, 43, 49, 51, 54, 48, 47, 53, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(f\"Provided 'features' list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(shuffled_array, ax=ax, cmap='Blues', square=True)\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if len(array) <= 0:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax\n    )\n    return ax", "compilation_passed": true, "time": 0.7881698608398438, "tests_passed": true, "error": null}}
{"selected_lines": [43, 56, 46, 50, 54, 49, 45, 53, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.size == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError(\"array must not be empty or must be 2D\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, cmap='Blues', square=True)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 47, 56, 46, 45, 43, 49, 53, 51, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if np.size(array) == 0:\n        np.random.seed(seed)\n    if len(array) == 0:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else [f\"X{i+1}\" for i in range(array.shape[1])],\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 50, 43, 49, 47, 45, 53, 56, 54, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if features:\n        np.random.seed(seed)\n    if array.ndim == 1:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features list must match number of columns.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cmap='YlGnBu', ax=ax)\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 44, 56, 43, 48, 47, 49, 45, 51, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError(\"'array' must be a non-empty 2D numpy array.\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, fmt='', cmap='Blues', cbar=False, ax=ax)\n        shuffled_array,\n        xticklabels=features if features is not None else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 56, 47, 43, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"array must be a non-empty 2D numpy array\")\n    if features is None:\n        raise ValueError(\"'features' must be a list with length matching the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 49, 44, 50, 43, 56, 47, 53, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not np.ndim(array) == 2:\n        np.random.seed(seed)\n    if not isinstance(array, np.ndarray):\n        raise ValueError(f\"'array' must not be empty and must be 2-dimensional, got {len(array.shape)} dimensions\")\n    if features is None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(range(1, array.shape[1] + 1)),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 56, 54, 48, 45, 46, 47, 50, 53, 49, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.ndim != 2:\n        raise ValueError('Invalid array provided. Array must be non-empty and 2D.')\n    if features is not None:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features else list(map(str, range(1, array.shape[1] + 1))),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 56, 44, 50, 46, 45, 47, 48, 53, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if features is None:\n        raise ValueError('Array is empty or not 2-dimensional')\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Number of features must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array)\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(shuffled_array,\n        shuffled_array,\n        xticklabels=features if features is not None else np.array([f\"{i}\" for i in range(1, array.shape[1] + 1)]),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 56, 44, 43, 54, 46, 47, 49, 50, 53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if not array.ndim == 2:\n        np.random.seed(seed)\n    if array.size == 0 or array.ndim != 2:\n        raise ValueError(\"Empty arrays or non-2D arrays are not supported.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[np.random.permutation(array.shape[0]), :]\n    fig, ax = plt.subplots(1, 1, figsize=(16, 9))\n    sns.heatmap(shuffled_array, annot=True, fmt='', ax=ax, cmap='Blues')\n        shuffled_array,\n        xticklabels=features,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must have the same number of columns as the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, cbar=False, ax=ax,\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = array[..., np.random.permutation(array.shape[1])]\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else range(1, array.shape[1] + 1),\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.8769640922546387, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Array must be non-empty and 2-dimensional\")\n    if features is None:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 54, 47, 46, 48, 56, 50, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if array.shape[0] == 0 or array.ndim != 2:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError('Input array must be a non-empty 2-dimensional numpy array')\n    if features is None:\n        raise ValueError(\"'features' list must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, ax=ax, annot=True)\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Length of features must match the number of columns in the input array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.7202279567718506, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n\n    Parameters:\n    - array (ndarray): The 2D numpy array to shuffle and plot. It must not be empty.\n    - features (list of str, optional): Custom labels for the columns after shuffling.\n                                        If not specified, default numerical labels are used.\n                                        The list must match the number of columns in 'array'.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility of the shuffle.\n\n    Returns:\n    - Axes: The matplotlib Axes object containing the heatmap.\n\n    Raises:\n    - ValueError: If 'features' is provided and does not match the number of columns in 'array'; and\n                  if 'array' is empty or not 2-dimensional.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - seaborn\n\n    Notes:\n    - This function uses the features list as labels for the heatmap's x-axis if features is provided;\n      otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of\n      columns in the array.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> array = np.random.rand(2, 5)\n    >>> ax = task_func(array, features=['A', 'B', 'C', 'D', 'E'], seed=1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> ax.collections[0].get_array().data.flatten()\n    array([0.60276338, 0.71518937, 0.4236548 , 0.5488135 , 0.54488318,\n           0.891773  , 0.43758721, 0.38344152, 0.64589411, 0.96366276])\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n    shuffled_array = np.random.permutation(array.T).T\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else None,\n        ax=ax,\n    )\n    return ax", "compilation_passed": true, "time": 0.17691874504089355, "tests_passed": false, "error": "TypeError"}}
