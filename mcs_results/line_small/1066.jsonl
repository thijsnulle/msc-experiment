{"selected_lines": [55, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if data.size > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 52, 64, 54, 60, 51, 59, 50, 63, 62, 58, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 62, 52, 60, 54, 59, 57, 64, 56, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.00922393798828125, "tests_passed": true, "error": null}}
{"selected_lines": [51, 59, 55, 60, 52, 64, 63, 57, 54, 58, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 60, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 58, 57, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009131908416748047, "tests_passed": true, "error": null}}
{"selected_lines": [63, 52, 51, 55, 62, 54, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.02145099639892578, "tests_passed": true, "error": null}}
{"selected_lines": [62, 54, 50, 60, 51, 64, 63, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 55, 51, 60, 54, 50, 63, 52, 57, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24249696731567383, "tests_passed": true, "error": null}}
{"selected_lines": [51, 64, 60, 56, 58, 57, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008980989456176758, "tests_passed": true, "error": null}}
{"selected_lines": [52, 64, 58, 51, 59, 60, 50, 57, 62, 54, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008909940719604492, "tests_passed": true, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24249696731567383, "tests_passed": true, "error": null}}
{"selected_lines": [63, 50, 60, 55, 54, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75,25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.006470918655395508, "tests_passed": true, "error": null}}
{"selected_lines": [63, 50, 51, 58, 57, 59, 60, 62, 52, 64, 54, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 57, 51, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if data.size > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(outliers > lower_bound, outliers < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 52, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 62, 60, 52, 63, 50, 58, 54, 57, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 64, 62, 58, 50, 63, 56, 54, 60, 55, 51, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 57, 52, 50, 64, 51, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 57, 58, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03369617462158203, "tests_passed": true, "error": null}}
{"selected_lines": [59, 50, 57, 58, 54, 63, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03448987007141113, "tests_passed": true, "error": null}}
{"selected_lines": [50, 64, 56, 55, 57, 54, 51, 63, 52, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if data.size > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 50, 54, 57, 55, 58, 56, 59, 63, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.3004469871520996, "tests_passed": true, "error": null}}
{"selected_lines": [52, 59, 58, 60, 62, 51, 54, 55, 63, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.027395009994506836, "tests_passed": true, "error": null}}
{"selected_lines": [62, 60, 58, 63, 51, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008098125457763672, "tests_passed": true, "error": null}}
{"selected_lines": [52, 54, 58, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[-num_outliers * 2:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.034827232360839844, "tests_passed": true, "error": null}}
{"selected_lines": [63, 59, 50, 60, 57, 54, 52, 56, 62, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007314205169677734, "tests_passed": true, "error": null}}
{"selected_lines": [63, 55, 60, 50, 64, 51, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2620890140533447, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.06559991836547852, "tests_passed": true, "error": null}}
{"selected_lines": [58, 63, 56, 62, 52, 54, 55, 59, 60, 57, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0056760311126708984, "tests_passed": true, "error": null}}
{"selected_lines": [51, 56, 55, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009692907333374023, "tests_passed": true, "error": null}}
{"selected_lines": [63, 51, 58, 52, 60, 50, 54, 62, 55, 56, 64, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 59, 56, 63, 52, 54, 60, 58, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 64, 57, 60, 54, 52, 63, 50, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2489011287689209, "tests_passed": true, "error": null}}
{"selected_lines": [59, 50, 64, 57, 54, 55, 58, 63, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.04515194892883301, "tests_passed": true, "error": null}}
{"selected_lines": [60, 57, 54, 51, 58, 64, 50, 56, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.00960993766784668, "tests_passed": true, "error": null}}
{"selected_lines": [63, 62, 56, 60, 51, 59, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0056340694427490234, "tests_passed": true, "error": null}}
{"selected_lines": [63, 62, 54, 58, 59, 50, 57, 56, 55, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array(\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.26839232444763184, "tests_passed": true, "error": null}}
{"selected_lines": [59, 55, 54, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 60, 64, 57, 55, 62, 56, 52, 51, 58, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 63, 50, 56, 51, 60, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.23246002197265625, "tests_passed": true, "error": null}}
{"selected_lines": [57, 59, 52, 54, 50, 60, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 55, 56, 60, 54, 59, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[-num_outliers * 2:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 63, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 63, 55, 57, 58, 60, 64, 54, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(outliers > lower_bound, outliers < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 64, 56, 59, 63, 58, 60, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 59, 57, 62, 58, 54, 55, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 60, 63, 54, 62, 56, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 64, 56, 58, 54, 50, 51, 62, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 64, 56, 52, 57, 62, 58, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 64, 62, 50, 55, 52, 51, 54, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.047661781311035156, "tests_passed": true, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.19050312042236328, "tests_passed": true, "error": null}}
{"selected_lines": [52, 56, 60, 50, 54, 63, 57, 64, 51, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75,25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where(data < lower_bound)\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 62, 50, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 59, 57, 56, 55, 50, 62, 54, 60, 58, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2548840045928955, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [62, 63, 54, 58, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 51, 56, 52, 55, 54, 64, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.014829874038696289, "tests_passed": true, "error": null}}
{"selected_lines": [51, 58, 50, 57, 63, 59, 52, 64, 56, 62, 54, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 54, 58, 62, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 59, 55, 64, 56, 51, 58, 52, 54, 60, 63, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.256439208984375, "tests_passed": true, "error": null}}
{"selected_lines": [50, 62, 55, 59, 56, 52, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.005702972412109375, "tests_passed": true, "error": null}}
{"selected_lines": [52, 60, 63, 58, 59, 51, 56, 57, 64, 55, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data.copy()\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 55, 58, 64, 54, 60, 63, 50, 62, 59, 51, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75,25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.034446001052856445, "tests_passed": true, "error": null}}
{"selected_lines": [50, 59, 57, 64, 63, 51, 54, 62, 55, 58, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 50, 63, 60, 58, 62, 55, 56, 51, 64, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 59, 58, 51, 57, 56, 50, 60, 52, 63, 55, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 62, 63, 52, 60, 59, 57, 64, 56, 50, 54, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03471684455871582, "tests_passed": true, "error": null}}
{"selected_lines": [59, 55, 58, 64, 56, 54, 63, 62, 52, 60, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0074198246002197266, "tests_passed": true, "error": null}}
{"selected_lines": [63, 62, 60, 59, 52, 55, 50, 64, 56, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(outliers > lower_bound, outliers < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 58, 52, 64, 56, 59, 60, 50, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 60, 55, 62, 51, 52, 56, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.005656003952026367, "tests_passed": true, "error": null}}
{"selected_lines": [52, 50, 63, 62, 59, 60, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if data.size > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 54, 64, 56, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 54, 56, 63, 52, 51, 59, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.013133764266967773, "tests_passed": true, "error": null}}
{"selected_lines": [63, 64, 55, 52, 62, 58, 51, 59, 56, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data.copy()\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 62, 64, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03381514549255371, "tests_passed": true, "error": null}}
{"selected_lines": [58, 63, 52, 50, 51, 57, 56, 62, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 62, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 55, 56, 58, 62, 60, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 55, 59, 50, 58, 60, 64, 57, 54, 62, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(outliers > lower_bound, outliers < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 60, 56, 55, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 63, 54, 55, 58, 51, 56, 60, 59, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.013074398040771484, "tests_passed": true, "error": null}}
{"selected_lines": [62, 59, 63, 54, 57, 51, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.005715847015380859, "tests_passed": true, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2620890140533447, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 54, 62, 51, 56, 50, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2204580307006836, "tests_passed": true, "error": null}}
{"selected_lines": [58, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0346066951751709, "tests_passed": true, "error": null}}
{"selected_lines": [59, 58, 63, 50, 55, 62, 64, 51, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0073468685150146484, "tests_passed": true, "error": null}}
{"selected_lines": [63, 64, 62, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008104801177978516, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 59, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03364300727844238, "tests_passed": true, "error": null}}
{"selected_lines": [56, 54, 58, 60, 52, 57, 64, 59, 50, 62, 55, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[-num_outliers * 2:]\n    if np.all(data[0] != data[1]):  # IQR only if more than 2 samples\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 62, 51, 57, 56, 52, 54, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.006606101989746094, "tests_passed": true, "error": null}}
{"selected_lines": [50, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 56, 58, 62, 55, 64, 60, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0056231021881103516, "tests_passed": true, "error": null}}
{"selected_lines": [54, 52, 59, 60, 64, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008889198303222656, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 60, 57, 52, 56, 64, 63, 55, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008258819580078125, "tests_passed": true, "error": null}}
{"selected_lines": [55, 54, 58, 56, 59, 60, 57, 50, 64, 63, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009170055389404297, "tests_passed": true, "error": null}}
{"selected_lines": [64, 63, 57, 62, 50, 55, 52, 58, 51, 59, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 57, 56, 52, 51, 64, 54, 59, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03493309020996094, "tests_passed": true, "error": null}}
{"selected_lines": [59, 60, 56, 58, 57, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 62, 63, 57, 52, 55, 51, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 55, 57, 54, 63, 51, 50, 64, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 58, 50, 64, 60, 59, 62, 55, 54, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 58, 55, 50, 63, 52, 56, 64, 60, 57, 51, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008955001831054688, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2548840045928955, "tests_passed": true, "error": null}}
{"selected_lines": [51, 57, 55, 52, 64, 54, 62, 63, 56, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012943029403686523, "tests_passed": true, "error": null}}
{"selected_lines": [58, 50, 57, 54, 55, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 51, 63, 56, 60, 62, 54, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012135982513427734, "tests_passed": true, "error": null}}
{"selected_lines": [64, 50, 52, 56, 58, 55, 63, 60, 59, 57, 62, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 56, 59, 54, 58, 64, 63, 51, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if data.size > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 63, 51, 62, 58, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [58, 59, 63, 64, 56, 50, 51, 57, 60, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 60, 63, 51, 50, 62, 59, 55, 56, 54, 57, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": false, "time": 0.0004899501800537109, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [52, 64, 62, 51, 59, 60, 58, 55, 50, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if data.size > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 58, 62, 60, 64, 56, 52, 55, 51, 59, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009589910507202148, "tests_passed": true, "error": null}}
{"selected_lines": [54, 64, 63, 56, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 64, 55, 52, 59, 54, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 56, 58, 55, 54, 52, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 63, 55, 50, 59, 60, 52, 51, 58, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 64, 62, 57, 59, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 63, 59, 54, 52, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.047412872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [54, 60, 57, 50, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 62, 60, 57, 54, 56, 55, 50, 51, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008944988250732422, "tests_passed": true, "error": null}}
{"selected_lines": [57, 52, 55, 50, 56, 63, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 63, 59, 57, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 51, 56, 58, 55, 57, 52, 50, 62, 54, 63, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 55, 54, 59, 56, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 58, 60, 59, 62, 57, 56, 51, 63, 50, 55, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75,25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 62, 54, 59, 51, 50, 55, 64, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 56, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009512901306152344, "tests_passed": true, "error": null}}
{"selected_lines": [55, 64, 60, 50, 51, 56, 63, 59, 62, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 64, 50, 60, 57, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 59, 55, 56, 52, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array(\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 52, 56, 50, 63, 64, 55, 57, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where(data < lower_bound)\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 62, 57, 52, 63, 59, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.08005189895629883, "tests_passed": true, "error": null}}
{"selected_lines": [60, 57, 56, 54, 50, 62, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009157180786132812, "tests_passed": true, "error": null}}
{"selected_lines": [55, 52, 64, 57, 60, 63, 62, 59, 50, 56, 58, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 58, 51, 55, 60, 50, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5*iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009546279907226562, "tests_passed": true, "error": null}}
{"selected_lines": [57, 58, 63, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.020800113677978516, "tests_passed": true, "error": null}}
{"selected_lines": [58, 56, 60, 51, 55, 52, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 63, 54, 60, 64, 50, 52, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 55, 51, 64, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 54, 57, 62, 55, 64, 60, 51, 56, 58, 50, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 57, 55, 58, 60, 63, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 63, 56, 64, 52, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.020692110061645508, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [52, 58, 63, 59, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007275104522705078, "tests_passed": true, "error": null}}
{"selected_lines": [58, 51, 50, 59, 55, 64, 54, 52, 62, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.034435272216796875, "tests_passed": true, "error": null}}
{"selected_lines": [57, 54, 51, 62, 63, 60, 55, 58, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 62, 59, 63, 60, 57, 52, 54, 55, 50, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 58, 64, 54, 63, 60, 56, 52, 59, 62, 51, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 55, 62, 51, 57, 64, 60, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if data.size > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 51, 62, 52, 58, 60, 55, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 64, 51, 58, 56, 63, 62, 55, 50, 54, 60, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 63, 60, 51, 62, 56, 55, 59, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 64, 51, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008992910385131836, "tests_passed": true, "error": null}}
{"selected_lines": [58, 57, 59, 56, 52, 62, 55, 60, 51, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array(\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where(data < lower_bound)\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 58, 60, 57, 54, 50, 64, 59, 55, 62, 56, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 50, 54, 59, 58, 51, 62, 57, 56, 64, 60, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 51, 57, 50, 54, 56, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 64, 51, 57, 52, 60, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.011409282684326172, "tests_passed": true, "error": null}}
{"selected_lines": [57, 62, 55, 50, 58, 51, 52, 54, 60, 59, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 64, 51, 55, 60, 56, 62, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 62, 56, 60, 59, 58, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75,25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007519960403442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [55, 50, 54, 59, 63, 52, 60, 57, 51, 58, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if data.size > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 55, 54, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if np.all(data[0] != data[1]):  # IQR only if more than 2 samples\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 51, 54, 50, 52, 55, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.020689964294433594, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [59, 55, 52, 62, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.06377196311950684, "tests_passed": true, "error": null}}
{"selected_lines": [59, 58, 54, 60, 57, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 63, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.031951904296875, "tests_passed": true, "error": null}}
{"selected_lines": [60, 52, 58, 50, 56, 62, 59, 55, 54, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 59, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03472709655761719, "tests_passed": true, "error": null}}
{"selected_lines": [63, 54, 56, 59, 51, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.26839232444763184, "tests_passed": true, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24249696731567383, "tests_passed": true, "error": null}}
{"selected_lines": [55, 60, 52, 63, 54, 50, 57, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 60, 50, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.00903010368347168, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.06377196311950684, "tests_passed": true, "error": null}}
{"selected_lines": [55, 60, 64, 57, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009624958038330078, "tests_passed": true, "error": null}}
{"selected_lines": [51, 63, 50, 54, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 55, 62, 58, 54, 57, 60, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 57, 62, 64, 59, 63, 60, 58, 55, 52, 56, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2489011287689209, "tests_passed": true, "error": null}}
{"selected_lines": [54, 64, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03380298614501953, "tests_passed": true, "error": null}}
{"selected_lines": [55, 58, 64, 50, 54, 62, 60, 56, 63, 59, 52, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 55, 62, 59, 54, 52, 51, 60, 63, 56, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008098125457763672, "tests_passed": true, "error": null}}
{"selected_lines": [54, 55, 50, 51, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 62, 56, 57, 54, 63, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 54, 57, 60, 64, 62, 56, 50, 52, 59, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 54, 63, 64, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007601737976074219, "tests_passed": true, "error": null}}
{"selected_lines": [54, 60, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 60, 54, 55, 52, 59, 51, 63, 57, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52, 59, 54, 62, 51, 50, 63, 56, 57, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 60, 62, 64, 56, 59, 63, 52, 55, 58, 57, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 58, 57, 56, 50, 63, 62, 52, 60, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 63, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 62, 52, 55, 59, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 55, 62, 59, 58, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009555339813232422, "tests_passed": true, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[-num_outliers * 2:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2888357639312744, "tests_passed": true, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.26839232444763184, "tests_passed": true, "error": null}}
{"selected_lines": [51, 58, 64, 57, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03386998176574707, "tests_passed": true, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2204580307006836, "tests_passed": true, "error": null}}
{"selected_lines": [64, 52, 62, 50, 54, 56, 58, 55, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0343937873840332, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012084245681762695, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [56, 58, 59, 57, 63, 55, 60, 51, 54, 64, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 62, 50, 63, 57, 52, 58, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 58, 55, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 55, 51, 52, 54, 64, 60, 57, 58, 50, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 63, 52, 62, 58, 60, 64, 50, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 62, 50, 64, 55, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 55, 57, 51, 52, 50, 54, 60, 56, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 51, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 52, 57, 50, 64, 55, 63, 54, 62, 60, 51, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 64, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.027117013931274414, "tests_passed": true, "error": null}}
{"selected_lines": [56, 55, 64, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if np.all(data[0] != data[1]):  # IQR only if more than 2 samples\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 54, 52, 50, 51, 59, 56, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 64, 54, 50, 63, 55, 58, 59, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if data.size > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 56, 52, 59, 55, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75,25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.25127291679382324, "tests_passed": true, "error": null}}
{"selected_lines": [56, 64, 63, 58, 52, 57, 55, 50, 51, 62, 54, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2489011287689209, "tests_passed": true, "error": null}}
{"selected_lines": [64, 58, 59, 62, 54, 50, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03442502021789551, "tests_passed": true, "error": null}}
{"selected_lines": [52, 56, 59, 55, 58, 64, 54, 50, 60, 51, 62, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009009838104248047, "tests_passed": true, "error": null}}
{"selected_lines": [54, 62, 51, 55, 64, 52, 57, 58, 56, 60, 50, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data.copy()\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 60, 52, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009669780731201172, "tests_passed": true, "error": null}}
{"selected_lines": [56, 60, 55, 62, 50, 51, 59, 57, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 60, 52, 54, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 50, 55, 63, 57, 51, 58, 52, 54, 59, 62, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 58, 63, 62, 55, 56, 51, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.07956576347351074, "tests_passed": true, "error": null}}
{"selected_lines": [50, 58, 63, 62, 55, 56, 60, 59, 52, 57, 51, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012314081192016602, "tests_passed": true, "error": null}}
{"selected_lines": [62, 63, 60, 51, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009595155715942383, "tests_passed": true, "error": null}}
{"selected_lines": [58, 59, 62, 52, 64, 55, 60, 63, 50, 51, 54, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 58, 56, 55, 59, 63, 60, 54, 50, 62, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 54, 55, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(outliers > lower_bound, outliers < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.00898599624633789, "tests_passed": true, "error": null}}
{"selected_lines": [58, 63, 54, 50, 62, 60, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 57, 58, 56, 59, 60, 52, 63, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007519960403442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [62, 59, 64, 55, 58, 57, 60, 54, 63, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.027373790740966797, "tests_passed": true, "error": null}}
{"selected_lines": [56, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009675025939941406, "tests_passed": true, "error": null}}
{"selected_lines": [54, 51, 52, 60, 63, 57, 50, 58, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where(data < lower_bound)\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 51, 55, 57, 58, 64, 50, 56, 54, 59, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012179851531982422, "tests_passed": true, "error": null}}
{"selected_lines": [58, 50, 62, 60, 64, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 60, 54, 63, 56, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 50, 58, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 56, 64, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.00962686538696289, "tests_passed": true, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.3286399841308594, "tests_passed": true, "error": null}}
{"selected_lines": [64, 62, 56, 59, 60, 55, 63, 58, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 58, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03419899940490723, "tests_passed": true, "error": null}}
{"selected_lines": [62, 64, 54, 52, 50, 56, 58, 60, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 59, 63, 62, 52, 51, 60, 56, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007300138473510742, "tests_passed": true, "error": null}}
{"selected_lines": [55, 56, 57, 60, 59, 63, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012084245681762695, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [56, 52, 63, 60, 62, 50, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 50, 63, 59, 62, 57, 58, 52, 60, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5*iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 63, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.047853946685791016, "tests_passed": true, "error": null}}
{"selected_lines": [51, 62, 57, 56, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009818792343139648, "tests_passed": true, "error": null}}
{"selected_lines": [57, 51, 62, 55, 64, 58, 50, 60, 59, 54, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 60, 55, 57, 50, 54, 64, 59, 51, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if data.size > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 63, 56, 55, 57, 54, 50, 62, 58, 64, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007364988327026367, "tests_passed": true, "error": null}}
{"selected_lines": [50, 58, 52, 55, 57, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0344390869140625, "tests_passed": true, "error": null}}
{"selected_lines": [62, 54, 57, 55, 64, 60, 56, 58, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 58, 52, 55, 59, 62, 63, 54, 51, 60, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if data.size > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 64, 54, 58, 62, 55, 51, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.010798931121826172, "tests_passed": true, "error": null}}
{"selected_lines": [58, 63, 64, 59, 62, 54, 56, 52, 60, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 54, 62, 56, 63, 58, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(outliers > lower_bound, outliers < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [63, 50, 64, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03471016883850098, "tests_passed": true, "error": null}}
{"selected_lines": [60, 55, 52, 58, 51, 63, 59, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 64, 52, 50, 63, 62, 57, 55, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0072650909423828125, "tests_passed": true, "error": null}}
{"selected_lines": [51, 64, 63, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.028069019317626953, "tests_passed": true, "error": null}}
{"selected_lines": [62, 59, 54, 52, 55, 60, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008834123611450195, "tests_passed": true, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[-num_outliers * 2:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2888357639312744, "tests_passed": true, "error": null}}
{"selected_lines": [52, 59, 50, 51, 57, 55, 56, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 58, 60, 56, 50, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 58, 54, 63, 52, 57, 55, 56, 62, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75,25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 64, 62, 56, 54, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 60, 52, 64, 62, 63, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007373809814453125, "tests_passed": true, "error": null}}
{"selected_lines": [52, 63, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.028234004974365234, "tests_passed": true, "error": null}}
{"selected_lines": [55, 50, 54, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.034446001052856445, "tests_passed": true, "error": null}}
{"selected_lines": [58, 54, 62, 57, 55, 50, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [58, 57, 51, 55, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.047440290451049805, "tests_passed": true, "error": null}}
{"selected_lines": [59, 58, 57, 56, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009064912796020508, "tests_passed": true, "error": null}}
{"selected_lines": [58, 52, 64, 57, 56, 59, 50, 62, 54, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009544849395751953, "tests_passed": true, "error": null}}
{"selected_lines": [56, 52, 62, 55, 63, 51, 57, 60, 50, 59, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007292985916137695, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 50, 63, 64, 57, 54, 58, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5*iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 56, 63, 54, 51, 64, 57, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 55, 51, 60, 59, 52, 57, 58, 64, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 56, 63, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 51, 56, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009636163711547852, "tests_passed": true, "error": null}}
{"selected_lines": [63, 50, 60, 58, 57, 52, 51, 56, 64, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 64, 62, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008104801177978516, "tests_passed": true, "error": null}}
{"selected_lines": [50, 55, 51, 56, 60, 63, 59, 64, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(outliers > lower_bound, outliers < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 63, 56, 64, 52, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.020692110061645508, "tests_passed": true, "error": null}}
{"selected_lines": [64, 59, 62, 50, 51, 56, 57, 54, 63, 52, 58, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 50, 56, 55, 64, 58, 63, 51, 54, 52, 57, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 56, 57, 52, 55, 51, 63, 50, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(outliers > lower_bound, outliers < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 60, 54, 56, 50, 58, 63, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 62, 51, 59, 55, 54, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0337526798248291, "tests_passed": true, "error": null}}
{"selected_lines": [55, 56, 64, 52, 63, 54, 58, 50, 60, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 62, 55, 59, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03506875038146973, "tests_passed": true, "error": null}}
{"selected_lines": [64, 57, 51, 62, 54, 63, 52, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 58, 56, 55, 62, 54, 59, 57, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.020801067352294922, "tests_passed": true, "error": null}}
{"selected_lines": [62, 56, 54, 63, 59, 55, 50, 60, 64, 58, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 50, 51, 59, 52, 56, 55, 54, 57, 62, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 60, 56, 59, 54, 64, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array(\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 52, 50, 57, 63, 55, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.013033866882324219, "tests_passed": true, "error": null}}
{"selected_lines": [60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.06444692611694336, "tests_passed": true, "error": null}}
{"selected_lines": [59, 57, 50, 62, 51, 55, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.02073192596435547, "tests_passed": true, "error": null}}
{"selected_lines": [63, 60, 64, 54, 50, 51, 52, 55, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 55, 51, 63, 54, 58, 64, 59, 52, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if np.all(data[0] != data[1]):  # IQR only if more than 2 samples\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 62, 51, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03504800796508789, "tests_passed": true, "error": null}}
{"selected_lines": [54, 50, 63, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 64, 54, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008941888809204102, "tests_passed": true, "error": null}}
{"selected_lines": [57, 62, 63, 52, 64, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.04763627052307129, "tests_passed": true, "error": null}}
{"selected_lines": [59, 57, 50, 56, 54, 64, 55, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009681224822998047, "tests_passed": true, "error": null}}
{"selected_lines": [60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.07295799255371094, "tests_passed": true, "error": null}}
{"selected_lines": [55, 63, 57, 50, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 51, 62, 54, 50, 64, 63, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 60, 51, 50, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 58, 59, 64, 63, 54, 52, 50, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 50, 64, 60, 56, 51, 57, 59, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 58, 59, 62, 51, 55, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 54, 59, 60, 50, 55, 58, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007309913635253906, "tests_passed": true, "error": null}}
{"selected_lines": [62, 59, 57, 52, 50, 63, 54, 55, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[-num_outliers * 2:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.047712087631225586, "tests_passed": true, "error": null}}
{"selected_lines": [58, 62, 54, 50, 64, 55, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 57, 50, 51, 58, 55, 56, 64, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 50, 64, 58, 51, 59, 52, 55, 63, 62, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 63, 50, 60, 57, 58, 51, 52, 54, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 54, 60, 63, 57, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 63, 51, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 63, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.04822802543640137, "tests_passed": true, "error": null}}
{"selected_lines": [58, 55, 56, 60, 52, 51, 57, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.00796818733215332, "tests_passed": true, "error": null}}
{"selected_lines": [56, 55, 54, 58, 57, 63, 60, 64, 62, 59, 52, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if np.all(data[0] != data[1]):  # IQR only if more than 2 samples\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 58, 57, 51, 56, 63, 55, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 59, 55, 52, 60, 64, 51, 58, 50, 56, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007284879684448242, "tests_passed": true, "error": null}}
{"selected_lines": [56, 51, 62, 55, 64, 59, 57, 63, 50, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.013115882873535156, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [55, 59, 60, 50, 57, 58, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 50, 62, 54, 56, 51, 60, 64, 58, 52, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data.copy()\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 59, 63, 51, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.020659923553466797, "tests_passed": true, "error": null}}
{"selected_lines": [62, 52, 63, 50, 60, 57, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 55, 63, 62, 60, 52, 64, 59, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 55, 59, 50, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0474092960357666, "tests_passed": true, "error": null}}
{"selected_lines": [54, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 64, 55, 52, 54, 59, 58, 51, 63, 57, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 64, 52, 60, 62, 50, 51, 54, 57, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 56, 55, 62, 51, 58, 64, 57, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 60, 64, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 62, 57, 59, 55, 58, 56, 51, 50, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 60, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 63, 51, 62, 59, 57, 60, 58, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24249696731567383, "tests_passed": true, "error": null}}
{"selected_lines": [63, 64, 62, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008104801177978516, "tests_passed": true, "error": null}}
{"selected_lines": [52, 63, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.028234004974365234, "tests_passed": true, "error": null}}
{"selected_lines": [57, 54, 50, 56, 60, 64, 59, 55, 52, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009855031967163086, "tests_passed": true, "error": null}}
{"selected_lines": [60, 59, 50, 57, 62, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 58, 59, 63, 54, 62, 56, 50, 52, 57, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24249696731567383, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [60, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008865118026733398, "tests_passed": true, "error": null}}
{"selected_lines": [62, 50, 60, 56, 63, 55, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012084245681762695, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [57, 58, 63, 50, 54, 52, 64, 62, 60, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array(\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 62, 57, 63, 64, 55, 56, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 60, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 60, 57, 59, 64, 55, 50, 52, 51, 54, 56, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.randn(num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 64, 55, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.027454853057861328, "tests_passed": true, "error": null}}
{"selected_lines": [51, 58, 63, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.02788400650024414, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [50, 59, 62, 58, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03447413444519043, "tests_passed": true, "error": null}}
{"selected_lines": [59, 54, 56, 50, 55, 52, 63, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(\n    if data.size > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 51, 55, 50, 64, 59, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 63, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.027307748794555664, "tests_passed": true, "error": null}}
{"selected_lines": [62, 50, 56, 63, 64, 54, 60, 51, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.06761336326599121, "tests_passed": true, "error": null}}
{"selected_lines": [50, 62, 51, 58, 64, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03442716598510742, "tests_passed": true, "error": null}}
{"selected_lines": [56, 63, 54, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009085893630981445, "tests_passed": true, "error": null}}
{"selected_lines": [59, 56, 62, 52, 50, 60, 51, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array(\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 58, 64, 57, 59, 63, 55, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 54, 63, 55, 52, 62, 57, 60, 59, 50, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(outliers > lower_bound, outliers < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 52, 54, 59, 64, 60, 56, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012934207916259766, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.25127291679382324, "tests_passed": true, "error": null}}
{"selected_lines": [64, 56, 57, 63, 52, 51, 50, 62, 55, 54, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 58, 59, 51, 55, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if data.size > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 54, 52, 63, 60, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array(\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 63, 57, 54, 58, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[-num_outliers * 2:]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 64, 60, 59, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 59, 58, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = normal_data.copy()\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008844137191772461, "tests_passed": true, "error": null}}
{"selected_lines": [63, 64, 50, 52, 60, 55, 54, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009656906127929688, "tests_passed": true, "error": null}}
{"selected_lines": [56, 57, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009656906127929688, "tests_passed": true, "error": null}}
{"selected_lines": [52, 62, 51, 54, 56, 50, 63, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 60, 62, 54, 63, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0478672981262207, "tests_passed": true, "error": null}}
{"selected_lines": [59, 52, 64, 51, 56, 54, 60, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data.copy()\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 64, 54, 58, 63, 55, 57, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [59, 51, 57, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03426814079284668, "tests_passed": true, "error": null}}
{"selected_lines": [63, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.021504878997802734, "tests_passed": true, "error": null}}
{"selected_lines": [51, 59, 55, 52, 56, 63, 54, 57, 60, 58, 64, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 50, 64, 52, 54, 60, 58, 56, 57, 55, 63, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[-num_outliers * 2:]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 58, 50, 60, 51, 59, 52, 62, 55, 57, 56, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if data.size > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 51, 60, 57, 58, 55, 56, 62, 63, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012084245681762695, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [56, 50, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 50, 54, 60, 64, 56, 57, 59, 58, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 60, 56, 52, 59, 63, 55, 57, 54, 64, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 63, 55, 62, 58, 64, 50, 54, 57, 60, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5*iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 51, 55, 52, 56, 60, 59, 63, 54, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 58, 64, 57, 59, 63, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 63, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.047853946685791016, "tests_passed": true, "error": null}}
{"selected_lines": [63, 64, 62, 55, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.027334928512573242, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24490690231323242, "tests_passed": true, "error": null}}
{"selected_lines": [52, 57, 56, 64, 62, 59, 58, 63, 54, 50, 60, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[-num_outliers * 2:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 63, 58, 51, 59, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.04740571975708008, "tests_passed": true, "error": null}}
{"selected_lines": [63, 51, 55, 59, 57, 52, 56, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.006487846374511719, "tests_passed": true, "error": null}}
{"selected_lines": [63, 55, 50, 62, 60, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.25127291679382324, "tests_passed": true, "error": null}}
{"selected_lines": [56, 64, 62, 52, 60, 54, 51, 58, 59, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009025096893310547, "tests_passed": true, "error": null}}
{"selected_lines": [51, 60, 52, 58, 57, 63, 55, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 56, 63, 64, 57, 60, 52, 50, 59, 58, 54, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.06377196311950684, "tests_passed": true, "error": null}}
{"selected_lines": [58, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.034446001052856445, "tests_passed": true, "error": null}}
{"selected_lines": [55, 56, 60, 59, 51, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.00894308090209961, "tests_passed": true, "error": null}}
{"selected_lines": [55, 54, 57, 50, 62, 60, 63, 56, 51, 59, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009554147720336914, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [57, 60, 52, 63, 51, 64, 62, 50, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 58, 54, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 62, 52, 58, 60, 64, 50, 51, 54, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 62, 59, 55, 64, 50, 51, 56, 52, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 62, 57, 60, 54, 59, 55, 56, 58, 52, 51, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 63, 64, 60, 51, 52, 57, 50, 59, 56, 55, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75,25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.06870198249816895, "tests_passed": true, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.30907225608825684, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.028157949447631836, "tests_passed": true, "error": null}}
{"selected_lines": [64, 60, 58, 56, 52, 55, 54, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 50, 54, 62, 64, 60, 51, 56, 59, 58, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.4589722156524658, "tests_passed": true, "error": null}}
{"selected_lines": [55, 58, 60, 59, 63, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 62, 57, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 57, 50, 56, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 63, 57, 55, 56, 58, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007225990295410156, "tests_passed": true, "error": null}}
{"selected_lines": [56, 60, 54, 52, 59, 57, 51, 63, 64, 50, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009594917297363281, "tests_passed": true, "error": null}}
{"selected_lines": [60, 63, 56, 55, 50, 51, 58, 64, 54, 57, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012332916259765625, "tests_passed": true, "error": null}}
{"selected_lines": [63, 62, 54, 57, 60, 58, 59, 55, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if data.size > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 59, 63, 54, 62, 58, 55, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 59, 56, 62, 54, 57, 51, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 54, 63, 51, 64, 58, 62, 60, 59, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 51, 57, 55, 63, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.013063907623291016, "tests_passed": true, "error": null}}
{"selected_lines": [50, 59, 51, 64, 56, 58, 62, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.033676862716674805, "tests_passed": true, "error": null}}
{"selected_lines": [56, 50, 58, 55, 62, 52, 60, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 56, 50, 51, 62, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.00968313217163086, "tests_passed": true, "error": null}}
{"selected_lines": [54, 59, 50, 51, 55, 56, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 62, 64, 60, 52, 59, 57, 63, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007253885269165039, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 63, 54, 59, 55, 62, 58, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 63, 59, 62, 57, 52, 60, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.00949716567993164, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.06377196311950684, "tests_passed": true, "error": null}}
{"selected_lines": [60, 63, 62, 56, 54, 50, 64, 52, 59, 51, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 52, 55, 58, 63, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.04788398742675781, "tests_passed": true, "error": null}}
{"selected_lines": [59, 64, 54, 51, 55, 57, 50, 56, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 59, 63, 52, 60, 51, 50, 58, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5*iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007391929626464844, "tests_passed": true, "error": null}}
{"selected_lines": [56, 64, 54, 52, 50, 51, 59, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 50, 51, 57, 60, 52, 58, 59, 56, 63, 64, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 62, 50, 58, 63, 59, 55, 60, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012936115264892578, "tests_passed": true, "error": null}}
{"selected_lines": [56, 51, 64, 58, 62, 63, 59, 55, 52, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012379884719848633, "tests_passed": true, "error": null}}
{"selected_lines": [56, 50, 58, 54, 55, 62, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 54, 58, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 60, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [54, 63, 50, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array(\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009596824645996094, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [63, 57, 51, 58, 56, 62, 50, 54, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75,25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 55, 54, 59, 60, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if np.all(data[0] != data[1]):  # IQR only if more than 2 samples\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 52, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008893966674804688, "tests_passed": true, "error": null}}
{"selected_lines": [51, 57, 52, 59, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03418684005737305, "tests_passed": true, "error": null}}
{"selected_lines": [50, 54, 51, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 50, 63, 58, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5*iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.02728891372680664, "tests_passed": true, "error": null}}
{"selected_lines": [58, 51, 50, 59, 62, 64, 54, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.27298402786254883, "tests_passed": true, "error": null}}
{"selected_lines": [60, 58, 62, 52, 55, 51, 57, 54, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 51, 55, 59, 58, 62, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 59, 62, 55, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009749412536621094, "tests_passed": true, "error": null}}
{"selected_lines": [57, 59, 50, 52, 58, 62, 63, 64, 55, 56, 51, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [52, 56, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008913993835449219, "tests_passed": true, "error": null}}
{"selected_lines": [64, 63, 58, 51, 55, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.028049230575561523, "tests_passed": true, "error": null}}
{"selected_lines": [52, 64, 60, 51, 56, 54, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 58, 60, 51, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(outliers > lower_bound, outliers < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008886098861694336, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75,25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.061662912368774414, "tests_passed": true, "error": null}}
{"selected_lines": [55, 56, 60, 51, 57, 62, 50, 63, 52, 64, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 60, 58, 51, 59, 57, 55, 64, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 58, 64, 56, 55, 59, 57, 60, 52, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = normal_data.copy()\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 60, 63, 51, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.00732111930847168, "tests_passed": true, "error": null}}
{"selected_lines": [58, 59, 57, 62, 64, 52, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 60, 50, 63, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 55, 54, 52, 63, 50, 60, 62, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where(data < lower_bound)\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009656906127929688, "tests_passed": true, "error": null}}
{"selected_lines": [50, 55, 60, 62, 59, 58, 56, 51, 63, 57, 54, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 55, 54, 57, 60, 62, 52, 63, 58, 59, 56, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 60, 54, 59, 64, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 52, 56, 55, 62, 58, 64, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 63, 54, 58, 51, 64, 57, 55, 52, 62, 50, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.027988910675048828, "tests_passed": true, "error": null}}
{"selected_lines": [57, 63, 55, 52, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.047759056091308594, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [55, 59, 51, 50, 62, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 60, 54, 62, 57, 56, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009139060974121094, "tests_passed": true, "error": null}}
{"selected_lines": [58, 52, 57, 59, 60, 54, 62, 51, 64, 50, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array(\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 60, 52, 57, 63, 62, 64, 56, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 57, 62, 51, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03409385681152344, "tests_passed": true, "error": null}}
{"selected_lines": [55, 50, 59, 60, 63, 57, 52, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 55, 60, 64, 56, 59, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.25127291679382324, "tests_passed": true, "error": null}}
{"selected_lines": [59, 51, 64, 55, 50, 54, 52, 60, 57, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 60, 58, 64, 52, 50, 63, 57, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5*iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 56, 62, 54, 51, 52, 57, 63, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[-num_outliers * 2:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2888357639312744, "tests_passed": true, "error": null}}
{"selected_lines": [63, 56, 62, 50, 51, 60, 64, 52, 55, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 52, 51, 59, 56, 58, 57, 50, 55, 54, 60, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0651712417602539, "tests_passed": true, "error": null}}
{"selected_lines": [59, 54, 60, 51, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 63, 60, 55, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 54, 55, 60, 63, 50, 57, 56, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 63, 55, 62, 50, 57, 64, 52, 60, 56, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007973194122314453, "tests_passed": true, "error": null}}
{"selected_lines": [59, 55, 51, 58, 62, 52, 50, 63, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5*iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008800029754638672, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 55, 63, 58, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.027215957641601562, "tests_passed": true, "error": null}}
{"selected_lines": [50, 59, 51, 63, 60, 62, 52, 64, 57, 54, 55, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009806156158447266, "tests_passed": true, "error": null}}
{"selected_lines": [54, 50, 62, 64, 52, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 60, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 64, 59, 50, 62, 63, 56, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.04731011390686035, "tests_passed": true, "error": null}}
{"selected_lines": [59, 50, 57, 52, 62, 55, 56, 54, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.26437807083129883, "tests_passed": true, "error": null}}
{"selected_lines": [54, 64, 58, 55, 51, 60, 56, 57, 59, 52, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75,25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009019851684570312, "tests_passed": true, "error": null}}
{"selected_lines": [54, 57, 63, 62, 58, 52, 64, 51, 59, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 55, 62, 52, 60, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 54, 52, 58, 64, 62, 63, 57, 51, 55, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(\n    if data.size > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 63, 56, 60, 52, 64, 55, 59, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = normal_data.copy()\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 59, 58, 51, 52, 62, 55, 57, 56, 54, 64, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009513139724731445, "tests_passed": true, "error": null}}
{"selected_lines": [55, 50, 56, 52, 57, 63, 58, 51, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007297992706298828, "tests_passed": true, "error": null}}
{"selected_lines": [64, 62, 57, 51, 56, 60, 55, 54, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 59, 52, 50, 54, 64, 62, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 50, 59, 51, 60, 63, 52, 55, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data.copy()\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.23246002197265625, "tests_passed": true, "error": null}}
{"selected_lines": [62, 51, 54, 55, 59, 58, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.034240007400512695, "tests_passed": true, "error": null}}
{"selected_lines": [56, 54, 60, 51, 62, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 64, 57, 52, 62, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008919000625610352, "tests_passed": true, "error": null}}
{"selected_lines": [56, 51, 58, 64, 54, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[-num_outliers * 2:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.00962376594543457, "tests_passed": true, "error": null}}
{"selected_lines": [54, 64, 60, 58, 55, 57, 63, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 60, 50, 59, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 62, 60, 55, 59, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 63, 59, 56, 58, 60, 51, 54, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 58, 57, 50, 64, 52, 63, 55, 62, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 54, 57, 50, 58, 52, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 58, 56, 60, 50, 63, 59, 52, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.005591154098510742, "tests_passed": true, "error": null}}
{"selected_lines": [58, 64, 56, 62, 54, 50, 60, 59, 51, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.01114797592163086, "tests_passed": true, "error": null}}
{"selected_lines": [54, 62, 63, 50, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 55, 63, 52, 51, 54, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5*iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.02110886573791504, "tests_passed": true, "error": null}}
{"selected_lines": [52, 60, 63, 50, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.005616188049316406, "tests_passed": true, "error": null}}
{"selected_lines": [58, 64, 56, 62, 59, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009637117385864258, "tests_passed": true, "error": null}}
{"selected_lines": [59, 58, 57, 51, 62, 64, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 62, 50, 58, 60, 56, 54, 52, 51, 55, 64, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 51, 54, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 60, 55, 54, 51, 56, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 60, 62, 52, 63, 57, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.005617856979370117, "tests_passed": true, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.25684094429016113, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [56, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008905887603759766, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [54, 51, 52, 63, 50, 62, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 63, 56, 62, 51, 50, 64, 54, 52, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0479128360748291, "tests_passed": true, "error": null}}
{"selected_lines": [58, 54, 50, 60, 51, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 63, 52, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.005707979202270508, "tests_passed": true, "error": null}}
{"selected_lines": [63, 50, 54, 60, 52, 56, 55, 64, 58, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [57, 62, 54, 50, 59, 52, 63, 56, 51, 55, 64, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009034872055053711, "tests_passed": true, "error": null}}
{"selected_lines": [63, 50, 59, 56, 60, 52, 57, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009610176086425781, "tests_passed": true, "error": null}}
{"selected_lines": [60, 51, 58, 59, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008805990219116211, "tests_passed": true, "error": null}}
{"selected_lines": [59, 63, 56, 64, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007954835891723633, "tests_passed": true, "error": null}}
{"selected_lines": [62, 58, 56, 59, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5*iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 62, 63, 56, 60, 59, 50, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 64, 63, 62, 50, 58, 55, 59, 51, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if np.all(data[0] != data[1]):  # IQR only if more than 2 samples\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.22954082489013672, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [63, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.027307748794555664, "tests_passed": true, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.23246002197265625, "tests_passed": true, "error": null}}
{"selected_lines": [60, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03363800048828125, "tests_passed": true, "error": null}}
{"selected_lines": [60, 56, 62, 58, 64, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 57, 63, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[-num_outliers * 2:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 64, 63, 57, 56, 55, 50, 59, 51, 58, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 57, 52, 60, 63, 55, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 60, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009588003158569336, "tests_passed": true, "error": null}}
{"selected_lines": [55, 50, 57, 63, 51, 52, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 55, 52, 63, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 58, 63, 62, 54, 60, 57, 51, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 54, 58, 55, 63, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03846883773803711, "tests_passed": true, "error": null}}
{"selected_lines": [59, 64, 51, 50, 58, 63, 52, 55, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 62, 55, 60, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008883953094482422, "tests_passed": true, "error": null}}
{"selected_lines": [50, 57, 54, 56, 60, 52, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 62, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03452706336975098, "tests_passed": true, "error": null}}
{"selected_lines": [57, 50, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 63, 62, 54, 57, 60, 58, 55, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 58, 50, 56, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.25684094429016113, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [62, 60, 51, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 54, 50, 64, 59, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03449606895446777, "tests_passed": true, "error": null}}
{"selected_lines": [56, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008836746215820312, "tests_passed": true, "error": null}}
{"selected_lines": [50, 52, 62, 60, 51, 64, 59, 56, 57, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 55, 60, 59, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 62, 64, 50, 63, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.02797102928161621, "tests_passed": true, "error": null}}
{"selected_lines": [57, 63, 55, 58, 54, 51, 60, 59, 50, 62, 56, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 63, 57, 64, 50, 55, 60, 58, 52, 62, 59, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 62, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03372001647949219, "tests_passed": true, "error": null}}
{"selected_lines": [59, 56, 50, 60, 63, 54, 62, 55, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03435516357421875, "tests_passed": true, "error": null}}
{"selected_lines": [57, 59, 58, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.034413814544677734, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.06377196311950684, "tests_passed": true, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2531611919403076, "tests_passed": true, "error": null}}
{"selected_lines": [57, 59, 62, 54, 52, 63, 58, 51, 64, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.00793910026550293, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [51, 56, 64, 58, 55, 62, 52, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[-num_outliers * 2:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008954048156738281, "tests_passed": true, "error": null}}
{"selected_lines": [58, 62, 57, 60, 50, 59, 54, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 50, 51, 54, 59, 62, 64, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03444790840148926, "tests_passed": true, "error": null}}
{"selected_lines": [60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.07295799255371094, "tests_passed": true, "error": null}}
{"selected_lines": [58, 64, 57, 54, 62, 55, 52, 60, 50, 56, 63, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 59, 55, 50, 52, 64, 56, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 60, 55, 56, 64, 50, 58, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 63, 52, 54, 51, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 59, 55, 64, 56, 63, 60, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 59, 63, 52, 54, 57, 56, 58, 55, 62, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 51, 60, 62, 50, 58, 56, 64, 52, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 54, 51, 57, 52, 60, 55, 64, 63, 50, 62, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5*iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 58, 59, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008894920349121094, "tests_passed": true, "error": null}}
{"selected_lines": [54, 58, 63, 55, 57, 56, 64, 50, 62, 59, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 60, 58, 54, 52, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": false, "time": 0.0004899501800537109, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [51, 52, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [60, 63, 64, 55, 54, 52, 57, 58, 50, 59, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 60, 59, 55, 52, 62, 58, 64, 51, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03440999984741211, "tests_passed": true, "error": null}}
{"selected_lines": [60, 57, 62, 52, 58, 51, 50, 55, 54, 59, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if np.all(data[0] != data[1]):  # IQR only if more than 2 samples\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24490690231323242, "tests_passed": true, "error": null}}
{"selected_lines": [52, 56, 58, 60, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 58, 57, 55, 62, 52, 64, 54, 56, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 64, 55, 50, 54, 63, 56, 62, 58, 52, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = normal_data.copy()\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 63, 50, 60, 52, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 62, 63, 57, 59, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.005660295486450195, "tests_passed": true, "error": null}}
{"selected_lines": [54, 57, 51, 58, 56, 60, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008929014205932617, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 58, 57, 63, 60, 54, 62, 56, 52, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 55, 58, 56, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [57, 52, 64, 51, 59, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = normal_data.copy()\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 59, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.028050899505615234, "tests_passed": true, "error": null}}
{"selected_lines": [62, 54, 63, 58, 56, 51, 60, 50, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24249696731567383, "tests_passed": true, "error": null}}
{"selected_lines": [59, 58, 57, 60, 52, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0055999755859375, "tests_passed": true, "error": null}}
{"selected_lines": [52, 63, 60, 64, 59, 55, 54, 51, 50, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 51, 58, 63, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 58, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03443622589111328, "tests_passed": true, "error": null}}
{"selected_lines": [59, 63, 51, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0336298942565918, "tests_passed": true, "error": null}}
{"selected_lines": [54, 62, 52, 64, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array(\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 55, 62, 63, 60, 52, 64, 56, 57, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008144140243530273, "tests_passed": true, "error": null}}
{"selected_lines": [56, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009675025939941406, "tests_passed": true, "error": null}}
{"selected_lines": [64, 51, 57, 59, 60, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.005543947219848633, "tests_passed": true, "error": null}}
{"selected_lines": [63, 60, 51, 64, 54, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 57, 60, 63, 64, 62, 58, 50, 52, 59, 54, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 60, 63, 59, 55, 58, 52, 62, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007295131683349609, "tests_passed": true, "error": null}}
{"selected_lines": [57, 63, 64, 56, 59, 54, 60, 50, 52, 51, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 51, 52, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 64, 59, 50, 57, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.042574167251586914, "tests_passed": true, "error": null}}
{"selected_lines": [64, 56, 52, 58, 59, 50, 55, 57, 60, 62, 63, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 63, 57, 50, 59, 55, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.23246002197265625, "tests_passed": true, "error": null}}
{"selected_lines": [60, 50, 55, 57, 64, 59, 62, 58, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 56, 59, 55, 51, 57, 63, 62, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 59, 62, 55, 51, 57, 63, 52, 50, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012084245681762695, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [60, 59, 64, 56, 50, 62, 55, 63, 58, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if np.all(data[0] != data[1]):  # IQR only if more than 2 samples\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 60, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.034446001052856445, "tests_passed": true, "error": null}}
{"selected_lines": [50, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 57, 63, 62, 64, 60, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008250236511230469, "tests_passed": true, "error": null}}
{"selected_lines": [58, 62, 60, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009720802307128906, "tests_passed": true, "error": null}}
{"selected_lines": [57, 60, 58, 59, 56, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 60, 51, 54, 59, 52, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.25127291679382324, "tests_passed": true, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.27733302116394043, "tests_passed": true, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.25684094429016113, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [57, 55, 64, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0408780574798584, "tests_passed": true, "error": null}}
{"selected_lines": [56, 52, 60, 64, 63, 59, 55, 54, 62, 50, 57, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 58, 60, 55, 63, 59, 56, 52, 57, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 64, 54, 58, 63, 60, 57, 55, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 57, 52, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03362298011779785, "tests_passed": true, "error": null}}
{"selected_lines": [63, 54, 52, 59, 51, 55, 60, 62, 50, 57, 64, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007411003112792969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.06377196311950684, "tests_passed": true, "error": null}}
{"selected_lines": [60, 51, 64, 56, 54, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 51, 57, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03426814079284668, "tests_passed": true, "error": null}}
{"selected_lines": [52, 57, 59, 64, 58, 62, 55, 54, 56, 60, 51, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if data.size > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 64, 50, 57, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03429985046386719, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [63, 64, 50, 54, 57, 51, 58, 60, 55, 56, 62, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24469828605651855, "tests_passed": true, "error": null}}
{"selected_lines": [56, 51, 60, 63, 59, 50, 52, 58, 62, 55, 57, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(outliers > lower_bound, outliers < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009554147720336914, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [54, 55, 52, 57, 60, 51, 64, 50, 62, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 59, 54, 50, 55, 58, 60, 64, 63, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 64, 58, 59, 60, 50, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 59, 57, 58, 56, 51, 63, 52, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 64, 62, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03448176383972168, "tests_passed": true, "error": null}}
{"selected_lines": [57, 63, 62, 59, 60, 55, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 63, 59, 56, 60, 62, 54, 58, 52, 55, 51, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data.copy()\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007220029830932617, "tests_passed": true, "error": null}}
{"selected_lines": [52, 56, 59, 57, 51, 64, 60, 54, 62, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009685039520263672, "tests_passed": true, "error": null}}
{"selected_lines": [64, 51, 55, 59, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [64, 60, 54, 57, 59, 63, 62, 55, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 60, 57, 58, 55, 50, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [56, 57, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009656906127929688, "tests_passed": true, "error": null}}
{"selected_lines": [60, 63, 58, 55, 50, 56, 54, 52, 64, 51, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24249696731567383, "tests_passed": true, "error": null}}
{"selected_lines": [63, 52, 50, 55, 58, 54, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.020769119262695312, "tests_passed": true, "error": null}}
{"selected_lines": [64, 60, 50, 63, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.02097296714782715, "tests_passed": true, "error": null}}
{"selected_lines": [56, 57, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 58, 50, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.020518779754638672, "tests_passed": true, "error": null}}
{"selected_lines": [55, 51, 56, 62, 54, 57, 60, 63, 58, 52, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009545087814331055, "tests_passed": true, "error": null}}
{"selected_lines": [57, 64, 52, 55, 50, 59, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 58, 55, 54, 52, 50, 51, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 55, 54, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008936166763305664, "tests_passed": true, "error": null}}
{"selected_lines": [62, 56, 51, 64, 58, 63, 60, 55, 50, 59, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75,25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(outliers > lower_bound, outliers < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.020974159240722656, "tests_passed": true, "error": null}}
{"selected_lines": [63, 57, 56, 52, 54, 60, 50, 59, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75,25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 63, 50, 51, 59, 60, 56, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 54, 63, 58, 56, 60, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 64, 63, 62, 55, 51, 52, 57, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 63, 62, 60, 51, 54, 64, 58, 50, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 64, 52, 50, 56, 51, 60, 57, 58, 54, 59, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5*iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.01252603530883789, "tests_passed": true, "error": null}}
{"selected_lines": [63, 60, 55, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.027003765106201172, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [51, 52, 63, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.034327030181884766, "tests_passed": true, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.19050312042236328, "tests_passed": true, "error": null}}
{"selected_lines": [51, 63, 50, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.020519018173217773, "tests_passed": true, "error": null}}
{"selected_lines": [63, 56, 50, 60, 59, 58, 64, 55, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 55, 52, 51, 50, 63, 57, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.005663871765136719, "tests_passed": true, "error": null}}
{"selected_lines": [50, 64, 63, 58, 51, 57, 52, 59, 55, 54, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 54, 64, 59, 62, 56, 52, 57, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 50, 63, 59, 55, 51, 58, 56, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5*iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 64, 51, 63, 59, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.04777407646179199, "tests_passed": true, "error": null}}
{"selected_lines": [64, 62, 57, 54, 59, 50, 56, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 56, 54, 52, 51, 57, 58, 50, 55, 64, 59, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 60, 55, 58, 52, 63, 57, 62, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52, 64, 50, 60, 56, 57, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 51, 54, 52, 62, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 59, 55, 52, 51, 58, 56, 54, 57, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007411003112792969, "tests_passed": true, "error": null}}
{"selected_lines": [55, 64, 51, 56, 57, 59, 54, 52, 60, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 63, 59, 52, 60, 57, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.01271510124206543, "tests_passed": true, "error": null}}
{"selected_lines": [58, 63, 52, 54, 51, 50, 55, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03126096725463867, "tests_passed": true, "error": null}}
{"selected_lines": [57, 52, 54, 64, 51, 60, 63, 56, 59, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 59, 58, 55, 50, 51, 57, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 60, 54, 55, 58, 59, 62, 51, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 51, 64, 58, 60, 63, 55, 50, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 59, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 54, 50, 63, 59, 62, 55, 64, 56, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007339954376220703, "tests_passed": true, "error": null}}
{"selected_lines": [64, 62, 59, 51, 57, 56, 55, 63, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008918046951293945, "tests_passed": true, "error": null}}
{"selected_lines": [64, 52, 58, 60, 56, 50, 63, 57, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where(data < lower_bound)\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007200002670288086, "tests_passed": true, "error": null}}
{"selected_lines": [63, 55, 52, 58, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.04729819297790527, "tests_passed": true, "error": null}}
{"selected_lines": [54, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.04809999465942383, "tests_passed": true, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.30907225608825684, "tests_passed": true, "error": null}}
{"selected_lines": [52, 54, 50, 59, 60, 51, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 59, 52, 58, 56, 51, 62, 57, 54, 55, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.where((data < lower_bound) | (data > upper_bound))]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 63, 58, 64, 55, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 62, 52, 51, 50, 58, 63, 60, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 55, 59, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if np.all(data[0] != data[1]):  # IQR only if more than 2 samples\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.30907225608825684, "tests_passed": true, "error": null}}
{"selected_lines": [62, 50, 63, 64, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.00890803337097168, "tests_passed": true, "error": null}}
{"selected_lines": [64, 57, 63, 60, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 63, 57, 55, 54, 58, 59, 50, 62, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.028350114822387695, "tests_passed": true, "error": null}}
{"selected_lines": [54, 64, 57, 59, 51, 55, 63, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.02076101303100586, "tests_passed": true, "error": null}}
{"selected_lines": [54, 60, 63, 51, 59, 50, 57, 55, 58, 56, 52, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007244110107421875, "tests_passed": true, "error": null}}
{"selected_lines": [52, 50, 56, 60, 57, 55, 62, 54, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 55, 56, 60, 64, 58, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 54, 60, 58, 63, 51, 57, 59, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009654045104980469, "tests_passed": true, "error": null}}
{"selected_lines": [63, 64, 57, 50, 52, 55, 60, 59, 62, 51, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 60, 57, 59, 58, 55, 63, 62, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0072269439697265625, "tests_passed": true, "error": null}}
{"selected_lines": [54, 57, 63, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.005643129348754883, "tests_passed": true, "error": null}}
{"selected_lines": [60, 63, 57, 64, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0064601898193359375, "tests_passed": true, "error": null}}
{"selected_lines": [63, 54, 51, 52, 64, 59, 50, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2548840045928955, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [58, 62, 56, 63, 55, 50, 60, 57, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5*iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 57, 58, 64, 59, 60, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 63, 56, 59, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0071680545806884766, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24608874320983887, "tests_passed": true, "error": null}}
{"selected_lines": [59, 62, 57, 56, 60, 51, 54, 55, 58, 64, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) <= (upper_bound - lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 55, 51, 64, 59, 63, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.02082681655883789, "tests_passed": true, "error": null}}
{"selected_lines": [62, 63, 57, 51, 58, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 63, 62, 57, 59, 52, 60, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 63, 60, 54, 50, 59, 58, 51, 57, 56, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.02063894271850586, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [62, 52, 51, 55, 63, 64, 50, 60, 59, 58, 57, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.02821207046508789, "tests_passed": true, "error": null}}
{"selected_lines": [56, 55, 64, 60, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 59, 56, 52, 54, 57, 58, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 60, 54, 63, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 63, 52, 56, 50, 54, 55, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 60, 63, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 56, 63, 55, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [56, 50, 51, 60, 64, 57, 58, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 58, 51, 52, 62, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 51, 57, 63, 59, 64, 52, 58, 54, 60, 55, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 64, 59, 50, 52, 60, 54, 57, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75,25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 60, 62, 59, 57, 55, 63, 52, 64, 56, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 62, 54, 56, 64, 52, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 56, 57, 64, 55, 58, 52, 50, 60, 59, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where(data < lower_bound)\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007250785827636719, "tests_passed": true, "error": null}}
{"selected_lines": [52, 50, 55, 56, 58, 63, 54, 51, 64, 59, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52, 63, 54, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 54, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 59, 63, 56, 58, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.006552219390869141, "tests_passed": true, "error": null}}
{"selected_lines": [63, 57, 50, 64, 58, 59, 52, 51, 60, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='blue')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 58, 57, 52, 62, 51, 64, 56, 60, 59, 55, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if np.all(data[0] != data[1]):  # IQR only if more than 2 samples\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 64, 63, 50, 58, 60, 55, 54, 52, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array(\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 60, 50, 64, 51, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 55, 62, 63, 54, 58, 51, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if np.all(data[0] != data[1]):  # IQR only if more than 2 samples\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 60, 52, 54, 55, 57, 58, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(loc=0.0, scale=1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(outliers > lower_bound, outliers < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 50, 63, 56, 62, 64, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.027881145477294922, "tests_passed": true, "error": null}}
{"selected_lines": [54, 55, 51, 60, 62, 63, 56, 50, 64, 58, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 60, 62, 50, 64, 54, 57, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 57, 51, 63, 50, 58, 55, 60, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24291300773620605, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.06377196311950684, "tests_passed": true, "error": null}}
{"selected_lines": [60, 55, 63, 59, 64, 56, 50, 52, 58, 51, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 64, 54, 63, 51, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007294178009033203, "tests_passed": true, "error": null}}
{"selected_lines": [62, 56, 64, 55, 60, 63, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.006515979766845703, "tests_passed": true, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.25005531311035156, "tests_passed": true, "error": null}}
{"selected_lines": [60, 56, 59, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 57, 52, 51, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where(data < lower_bound)\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007218122482299805, "tests_passed": true, "error": null}}
{"selected_lines": [54, 57, 51, 64, 62, 59, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.027315855026245117, "tests_passed": true, "error": null}}
{"selected_lines": [59, 63, 58, 56, 55, 54, 62, 50, 51, 60, 57, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 50, 56, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.06559991836547852, "tests_passed": true, "error": null}}
{"selected_lines": [59, 58, 52, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.021583080291748047, "tests_passed": true, "error": null}}
{"selected_lines": [56, 57, 62, 51, 59, 55, 54, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0337526798248291, "tests_passed": true, "error": null}}
{"selected_lines": [52, 58, 56, 60, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 60, 56, 63, 50, 51, 57, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 52, 56, 54, 64, 50, 57, 58, 63, 51, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 62, 59, 60, 57, 58, 54, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array(\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 55, 59, 60, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 62, 52, 54, 60, 58, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(outliers > lower_bound, outliers < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008865118026733398, "tests_passed": true, "error": null}}
{"selected_lines": [52, 58, 56, 51, 57, 60, 64, 55, 62, 59, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.010860919952392578, "tests_passed": true, "error": null}}
{"selected_lines": [62, 59, 56, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008878946304321289, "tests_passed": true, "error": null}}
{"selected_lines": [64, 56, 62, 55, 52, 57, 59, 51, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = normal_data.copy()\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009652137756347656, "tests_passed": true, "error": null}}
{"selected_lines": [58, 52, 54, 50, 64, 62, 59, 60, 57, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 60, 58, 51, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 63, 52, 54, 64, 57, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2489011287689209, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [55, 54, 57, 51, 63, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 57, 63, 50, 51, 52, 59, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.020884990692138672, "tests_passed": true, "error": null}}
{"selected_lines": [55, 58, 64, 54, 62, 63, 52, 57, 56, 59, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2548840045928955, "tests_passed": true, "error": null}}
{"selected_lines": [57, 60, 54, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008776187896728516, "tests_passed": true, "error": null}}
{"selected_lines": [51, 58, 59, 55, 56, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10., 10., size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24469828605651855, "tests_passed": true, "error": null}}
{"selected_lines": [57, 54, 58, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.034499168395996094, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 52, 63, 58, 55, 54, 59, 56, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.020895957946777344, "tests_passed": true, "error": null}}
{"selected_lines": [50, 59, 57, 52, 51, 56, 55, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 58, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012634992599487305, "tests_passed": true, "error": null}}
{"selected_lines": [60, 63, 54, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 51, 58, 63, 56, 54, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.047229766845703125, "tests_passed": true, "error": null}}
{"selected_lines": [50, 63, 64, 56, 58, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [64, 50, 62, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if data.size > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 51, 56, 55, 63, 62, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0073506832122802734, "tests_passed": true, "error": null}}
{"selected_lines": [51, 52, 50, 64, 59, 54, 58, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009573936462402344, "tests_passed": true, "error": null}}
{"selected_lines": [63, 57, 50, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.256392240524292, "tests_passed": true, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24249696731567383, "tests_passed": true, "error": null}}
{"selected_lines": [64, 57, 63, 60, 59, 54, 55, 56, 50, 52, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012315988540649414, "tests_passed": true, "error": null}}
{"selected_lines": [64, 55, 51, 63, 52, 56, 60, 54, 57, 58, 59, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24249696731567383, "tests_passed": true, "error": null}}
{"selected_lines": [63, 51, 52, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 56, 63, 55, 60, 54, 50, 52, 51, 57, 59, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.006359100341796875, "tests_passed": true, "error": null}}
{"selected_lines": [60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007793903350830078, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [58, 59, 51, 64, 62, 60, 63, 54, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30, label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 59, 63, 64, 56, 50, 58, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr*1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 57, 56, 54, 50, 52, 62, 59, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 60, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where(data < lower_bound)\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 63, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.04778909683227539, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.25127291679382324, "tests_passed": true, "error": null}}
{"selected_lines": [63, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 56, 64, 51, 62, 63, 58, 60, 59, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, size=(num_samples,))\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 58, 52, 54, 60, 63, 62, 56, 50, 55, 64, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 63, 55, 56, 51, 52, 50, 57, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012084245681762695, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.07295799255371094, "tests_passed": true, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.25684094429016113, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [54, 51, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 51, 55, 50, 63, 57, 59, 58, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.02077007293701172, "tests_passed": true, "error": null}}
{"selected_lines": [55, 59, 60, 54, 52, 56, 51, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.26839232444763184, "tests_passed": true, "error": null}}
{"selected_lines": [54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2620890140533447, "tests_passed": true, "error": null}}
{"selected_lines": [63, 58, 51, 50, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.02071094512939453, "tests_passed": true, "error": null}}
{"selected_lines": [60, 56, 64, 51, 55, 62, 58, 57, 50, 63, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 54, 50, 51, 56, 62, 63, 52, 60, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array(\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.24199390411376953, "tests_passed": true, "error": null}}
{"selected_lines": [64, 52, 63, 62, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03165626525878906, "tests_passed": true, "error": null}}
{"selected_lines": [58, 56, 60, 51, 59, 63, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 58, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03419899940490723, "tests_passed": true, "error": null}}
{"selected_lines": [58, 54, 50, 63, 51, 57, 62, 60, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 59, 54, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.26839232444763184, "tests_passed": true, "error": null}}
{"selected_lines": [50, 57, 59, 58, 55, 52, 56, 51, 54, 64, 60, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 59, 57, 51, 63, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, (num_samples,))\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.020740985870361328, "tests_passed": true, "error": null}}
{"selected_lines": [54, 62, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.034246206283569336, "tests_passed": true, "error": null}}
{"selected_lines": [56, 59, 50, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 54, 59, 52, 56, 62, 63, 58, 64, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 50, 63, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (1.5 * iqr)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True, bins=40, color='lightgray')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.04105067253112793, "tests_passed": true, "error": null}}
{"selected_lines": [50, 60, 52, 51, 63, 59, 54, 57, 62, 58, 64, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 50, 56, 59, 54, 64, 57, 63, 60, 55, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 62, 58, 51, 50, 54, 63, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[-num_outliers * 2:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.sort(data[data > lower_bound])[:num_samples // 10]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.047792911529541016, "tests_passed": true, "error": null}}
{"selected_lines": [62, 56, 64, 55, 60, 63, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.006515979766845703, "tests_passed": true, "error": null}}
{"selected_lines": [56, 51, 54, 60, 59, 62, 52, 64, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0073850154876708984, "tests_passed": true, "error": null}}
{"selected_lines": [54, 62, 50, 59, 60, 56, 51, 64, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 50, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.randn(num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03432488441467285, "tests_passed": true, "error": null}}
{"selected_lines": [64, 50, 59, 51, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.rand(num_samples)\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.033576011657714844, "tests_passed": true, "error": null}}
{"selected_lines": [56, 57, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009656906127929688, "tests_passed": true, "error": null}}
{"selected_lines": [63, 55, 64, 52, 51, 58, 60, 57, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009639978408813477, "tests_passed": true, "error": null}}
{"selected_lines": [57, 55, 58, 60, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if data.size > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 60, 55, 64], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 59, 50, 62, 55, 60, 57, 51, 58, 54, 56, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if data.size > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 54, 51, 57, 56, 63, 52, 60, 59, 58, 62, 50], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data < upper_bound, data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, color='k')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 64, 50, 62, 58, 63, 55, 52, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 59, 64, 54, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.02071404457092285, "tests_passed": true, "error": null}}
{"selected_lines": [64, 56, 50, 51, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 58, 59, 55, 64, 62, 57, 51, 56, 54, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75,25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 55, 51, 64, 60, 59, 52, 54, 62, 57, 50, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[\n    if len(normal_data) > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 54, 64, 55, 58, 57, 51, 52, 56, 63, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 51, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012928009033203125, "tests_passed": true, "error": null}}
{"selected_lines": [54, 64, 58, 56, 63, 62, 51, 57], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 51, 59, 63, 64, 62, 50, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5*iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008188962936401367, "tests_passed": true, "error": null}}
{"selected_lines": [64, 60, 52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 51, 58, 50, 52, 56, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.012789726257324219, "tests_passed": true, "error": null}}
{"selected_lines": [63, 59, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[num_samples:]\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.020734786987304688, "tests_passed": true, "error": null}}
{"selected_lines": [63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.4589722156524658, "tests_passed": true, "error": null}}
{"selected_lines": [58, 50, 57, 64, 60, 62, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(lower_bound < data, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.00883793830871582, "tests_passed": true, "error": null}}
{"selected_lines": [50, 60, 55, 63, 58, 52, 57, 56, 59, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=100)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.020897865295410156, "tests_passed": true, "error": null}}
{"selected_lines": [54, 50, 62, 60, 51, 57, 52, 58, 56, 55, 59, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 55, 62, 54, 59, 52, 56, 60, 51, 57, 64, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = normal_data + outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 62, 51], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 52, 54, 50, 51, 56, 55, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = []\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(8, 4))\n    ax.hist(data, bins=20, density=True)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 64, 55, 60, 54, 63, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[normal_data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, density=True, color='green', label='Data')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 57, 64, 63, 54, 50, 58, 59, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [64, 52, 63, 50, 59, 62, 54, 58, 57, 55, 60, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.empty_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data < lower_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [62, 56, 57, 59, 52, 50, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0.0, 1.0, size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers), axis=0)\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data <= upper_bound) & (data >= lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008986949920654297, "tests_passed": true, "error": null}}
{"selected_lines": [60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound] + outliers_detected\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.007793903350830078, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [64, 52, 59, 57, 56, 55, 62, 58, 63], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=10)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.006175041198730469, "tests_passed": true, "error": null}}
{"selected_lines": [60, 50, 64, 62, 54, 51, 52, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [63, 51, 58, 56, 50, 62, 52, 54, 60, 64, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = data[(np.median(data) - 1.5 * np.interquartile(data)):\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 57, 54, 62], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = []\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.03422808647155762, "tests_passed": true, "error": null}}
{"selected_lines": [51, 60, 57, 55, 50, 64, 59], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008854150772094727, "tests_passed": true, "error": null}}
{"selected_lines": [64, 51, 55, 59, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [52, 62, 63, 64, 55, 59, 57, 50, 60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=20, color=\"k\")\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.027281761169433594, "tests_passed": true, "error": null}}
{"selected_lines": [50, 60, 64, 62, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = None\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < upper_bound) & (data > lower_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.06761336326599121, "tests_passed": true, "error": null}}
{"selected_lines": [60, 50, 52, 64, 56, 59, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(0, 1, num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers])\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 63, 57, 55, 60, 64, 52, 50, 56], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.randn(num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.logical_and(data > lower_bound, data < upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 58, 63, 57, 56, 55], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 58, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.zeros_like(data)\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.009705781936645508, "tests_passed": true, "error": null}}
{"selected_lines": [60, 52, 58, 51, 55, 62, 64, 54], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10.0, 10.0, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]\n    if data.size > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[np.abs(outliers) > upper_bound or outliers[np.abs(outliers) < lower_bound]]\n    # Plot histogram\n    _, ax = plt.subplots(figsize=(6, 4))\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 63, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - 1.5 * iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = np.where((data < lower_bound) | (data > upper_bound))[0]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=25, edgecolor=\"black\", linewidth=0.5)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.030716896057128906, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate((normal_data, outliers))\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.2489011287689209, "tests_passed": true, "error": null}}
{"selected_lines": [63, 56, 51, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(-10, 10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(data, 75), np.percentile(data, 25)\n        iqr = q75 - q25\n        lower_bound = q25 - iqr * 1.5\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=50, density=True, edgecolor='black')\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.013067007064819336, "tests_passed": true, "error": null}}
{"selected_lines": [55, 54, 60, 62, 58], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\n\n\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    \"\"\"\n    Generate a dataset comprising both normal data and artificially introduced outliers,\n    and plot a histogram of the combined data. The function detects outliers in the dataset\n    using the Interquartile Range (IQR) method, but it only considers the normally distributed\n    portion of the data for outlier detection. The outliers detected and the artificially\n    introduced outliers might not always coincide.\n\n    Parameters:\n    - num_samples (int): Number of samples to be drawn from a normal distribution. The default \n      value is 100. If set to zero or a negative number, no normal data will be generated, \n      and the dataset will only contain artificially introduced outliers.\n    - num_outliers (int): Number of outliers to be artificially introduced into the dataset. \n      These outliers are uniformly distributed between -10 and 10. The default value is 5. \n      If set to zero, no outliers will be artificially introduced.\n\n\n    Returns:\n    - data (numpy array): The combined dataset, including both normally distributed data and \n      the artificially introduced outliers.\n    - outliers_detected (numpy array): The outliers detected using the IQR method. This \n      detection is based solely on the normally distributed portion of the data.\n    - ax (matplotlib.axes._axes.Axes): The Axes object for the histogram \n      plot of the combined dataset.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Note:\n    - The artificially introduced outliers are not necessarily the same as the outliers\n    detected by the IQR method. The IQR method is applied only to the normally distributed\n    data, and thus some of the artificially introduced outliers may not be detected,\n    and some normal data points may be falsely identified as outliers.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> data, outliers_detected, ax = task_func()\n    >>> print(outliers_detected)\n    [-9.61613603 -3.96850367  3.20347075]\n    \"\"\"\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = None\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - iqr\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = outliers[data > upper_bound]\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n    return data, outliers_detected, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
